{
  "nodes": [
    {
      "parameters": {},
      "name": "[START] dev_request processor",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [-1888, 144],
      "id": "d80b0c2d-5d81-4ed6-984a-e9ddd1d0366a"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2138a08d-8a50-4bf6-9407-c4667a4e40fe",
              "name": "lead_id",
              "value": "={{ $json.lead_id }}",
              "type": "string"
            },
            {
              "id": "67417578-8316-43c3-8f0d-5f6535d8e7c1",
              "name": "contact_id",
              "value": "={{ $json.contact_id }}",
              "type": "string"
            },
            {
              "id": "d0e1b644-2458-45ac-9b93-875f532a875a",
              "name": "conversation_id",
              "value": "={{ $json.conversation_id }}",
              "type": "string"
            },
            {
              "id": "c1f6b15a-f12b-4ba5-a4f6-7b8ac42c701d",
              "name": "full_name",
              "value": "={{ $json.full_name }}",
              "type": "string"
            },
            {
              "id": "7876a47a-18f6-4171-85b3-3a72d7cf7d0a",
              "name": "email",
              "value": "={{ $json.email }}",
              "type": "string"
            },
            {
              "id": "ab833534-192a-4318-8f85-780c855a8220",
              "name": "lang",
              "value": "={{ ['ru', 'en', 'pl'].includes($json.preferred_lang) ? $json.preferred_lang : 'ru' }}",
              "type": "string"
            },
            {
              "id": "0d1894a7-8f55-46aa-9d52-7b065a4e5113",
              "name": "timezone",
              "value": "={{ $json.timezone || 'Europe/Warsaw' }}",
              "type": "string"
            },
            {
              "id": "df47e58a-a55e-49b5-90a6-121f1816f0ea",
              "name": "calendly_base_url",
              "value": "https://calendly.com/arsenii-ovsianykov-idealogic",
              "type": "string"
            },
            {
              "id": "722125bb-d130-4e55-901c-d70379fd60c7",
              "name": "from_name",
              "value": "Arsenii from Idealogic",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "name": "0. Ctx & Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-1680, 144],
      "id": "c4a42003-cbf7-4917-b42e-9423b281916c"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT subject_template, body_template FROM templates WHERE name = $1;",
        "options": {
          "queryReplacement": "={{ [ 'dev_request.initial.' + $('0. Ctx & Config').item.json.lang ] }}"
        }
      },
      "name": "1a. Load Template",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-1472, 144],
      "id": "5bc53ae9-0c47-4628-878a-cc18a8507330",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "combinator": "and",
          "conditions": [
            {
              "leftValue": "={{ $('1a. Load Template').item.json.subject_template }}",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              },
              "rightValue": null
            }
          ]
        },
        "options": {}
      },
      "name": "1b. IF: Template Found?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-1280, 144],
      "id": "395afc44-1dea-4ae1-a206-3d8bc3bc0c56"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT subject_template, body_template FROM templates WHERE name = 'dev_request.initial.en';",
        "options": {}
      },
      "name": "1c-fallback. Load EN Template",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-1008, 256],
      "id": "c15fb3ac-9a5c-425e-9892-8471a752c906",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8f3e589f-8e54-4712-9c29-3b951167a1aa",
              "name": "en_subject",
              "value": "={{ $('1c-fallback. Load EN Template').item.json.subject_template }}",
              "type": "string"
            },
            {
              "id": "e21b798b-2856-4b95-a22d-6060c4004940",
              "name": "en_body",
              "value": "={{ $('1c-fallback. Load EN Template').item.json.body_template }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "name": "1d-prep. Prepare AI Prompt Vars",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-800, 256],
      "id": "d6ec6b89-a3fb-4660-9c74-1ff6de883b63"
    },
    {
      "parameters": {
        "jsCode": "const config = $('0. Ctx & Config').item.json;\nconst fallback = $('1c-fallback. Load EN Template').item.json;\n\nif ($json.error) {\n  return [{\n    subject_template: fallback.subject_template,\n    body_template: fallback.body_template,\n    template_source: 'fallback_en',\n    template_lang: 'en',\n    translation_error: $json.error,\n    ai_errors: [],\n  }];\n}\n\nconst rootText = typeof $json.text === 'string' ? $json.text : null;\nconst contentText = $json.content?.[0]?.text ?? null;\nconst text = (rootText ?? contentText ?? '').trim();\n\nif (!text) {\n  return [{\n    subject_template: fallback.subject_template,\n    body_template: fallback.body_template,\n    template_source: 'fallback_en',\n    template_lang: 'en',\n    translation_error: { message: 'Empty response from translator' },\n    ai_errors: [],\n  }];\n}\n\nconst start = text.indexOf('{');\nconst end = text.lastIndexOf('}');\nif (start === -1 || end === -1) {\n  return [{\n    subject_template: fallback.subject_template,\n    body_template: fallback.body_template,\n    template_source: 'fallback_en',\n    template_lang: 'en',\n    translation_error: { message: 'Translator returned no JSON object' },\n    ai_errors: [],\n  }];\n}\n\nconst jsonStr = text.slice(start, end + 1);\nlet parsed;\ntry {\n  parsed = JSON.parse(jsonStr);\n} catch (error) {\n  return [{\n    subject_template: fallback.subject_template,\n    body_template: fallback.body_template,\n    template_source: 'fallback_en',\n    template_lang: 'en',\n    translation_error: { message: error.message },\n    ai_errors: [],\n  }];\n}\n\nconst subject = parsed.subject || fallback.subject_template;\nconst body = parsed.body || fallback.body_template;\n\nreturn [{\n  subject_template: subject,\n  body_template: body,\n  template_source: 'ai_translation',\n  template_lang: config.lang || 'ru',\n  translation_error: null,\n  ai_errors: Array.isArray(parsed.ai_errors) ? parsed.ai_errors : [],\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-256, 256],
      "name": "1e. Parse AI JSON",
      "id": "19440994-64f7-405f-a99f-50e57df4638d"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "claude-3-5-haiku-20241022",
          "mode": "list",
          "cachedResultName": "claude-3-5-haiku-20241022"
        },
        "messages": {
          "values": [
            {
              "content": "You are a translation API. Your only task is to translate the user's provided JSON content into the specified target language.\n\nRULES:\n1. Translate the text values accurately.\n2. You MUST preserve placeholders like `{{name}}` and `{{calendly_url}}` exactly as they are. DO NOT translate the content inside {{...}}.\n3. Return ONLY a valid, minified JSON object with the exact same keys as the input. No comments, no prose, no explanations.",
              "role": "assistant"
            },
            {
              "content": "=TARGET LANGUAGE: \"{{ $('0. Ctx & Config').item.json.lang }}\"\n---\nJSON TO TRANSLATE:\n{\n  \"subject\": \"{{ $('1d-prep. Prepare AI Prompt Vars').item.json.en_subject }}\",\n  \"body\": \"{{ $('1d-prep. Prepare AI Prompt Vars').item.json.en_body }}\"\n}"
            }
          ]
        },
        "options": {}
      },
      "name": "1d-translate. AI Translate Template",
      "type": "@n8n/n8n-nodes-langchain.anthropic",
      "typeVersion": 1,
      "position": [-592, 256],
      "id": "d53d615e-68ee-42c4-9129-2aae0dd670a2",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "anthropicApi": {
          "id": "GIfdwzVM7KrSSX07",
          "name": "Anthropic account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e0b5f1f0-4e58-4e89-913a-a1b9b9423c8e",
              "name": "=subject_template",
              "value": "={{ $('1a. Load Template').item.json.subject_template }}",
              "type": "string"
            },
            {
              "id": "18c8b6d8-b391-4470-a38f-6fd6a8e805f1",
              "name": "body_template",
              "value": "={{ $('1a. Load Template').item.json.body_template }}",
              "type": "string"
            },
            {
              "id": "23318de4-eb9e-4cdb-a21a-19e009fa0690",
              "name": "template_source",
              "type": "string",
              "value": "db_template"
            },
            {
              "id": "21c2d39a-242a-47e1-95b4-d1e24241e567",
              "name": "template_lang",
              "type": "string",
              "value": "={{ $('0. Ctx & Config').item.json.lang }}"
            },
            {
              "id": "0557c2be-801a-433f-9d84-41c03c72423e",
              "name": "translation_error",
              "type": "string",
              "value": "={{ null }}"
            },
            {
              "id": "002dbf32-8c28-4f34-8001-73df1996572b",
              "name": "ai_errors",
              "type": "array",
              "value": "={{ [] }}"
            }
          ]
        },
        "options": {}
      },
      "name": "1f. Shape 'True' Path Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-1008, 48],
      "id": "fa70f7bf-93f8-4fdc-9483-ad7274dafd6d"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "name": "2. Merge Template Branches",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-16, 64],
      "id": "680f61b8-abfe-4856-8bff-fd0bb4f8bb21"
    },
    {
      "parameters": {
        "jsCode": "const config = $('0. Ctx & Config').item.json;\nconst template = $('2. Merge Template Branches').item.json;\n\nconst subjectText = template.subject_template || template.subject;\nconst bodyText = template.body_template || template.body;\n\nif (typeof subjectText !== 'string' || typeof bodyText !== 'string') {\n  throw new Error('Could not find subject or body text in the template payload.');\n}\n\nconst clientName = config.full_name || 'there';\nconst fromName = config.from_name || 'Team';\nconst calendlyUrl = config.calendly_base_url || '';\n\nlet finalSubject = subjectText.replace(/{{name}}/g, clientName);\nlet finalBody = bodyText\n  .replace(/{{name}}/g, clientName)\n  .replace(/{{calendly_url}}/g, calendlyUrl)\n  .replace(/{{from_name}}/g, fromName);\n\nreturn [{\n  ...$item.json,\n  final_subject: finalSubject,\n  final_body: finalBody,\n  template_lang: template.template_lang || config.lang || 'ru',\n  template_source: template.template_source || 'db_template',\n  translation_error: template.translation_error || null,\n  template_ai_errors: template.ai_errors || [],\n}];"
      },
      "name": "2b. Compose Initial Reply",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [208, 64],
      "id": "81d41d6d-b82d-42c3-9bad-e533c9b80c60"
    },
    {
      "parameters": {
        "amount": "={{ Math.floor(Math.random() * 5) + 1 }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [416, 64],
      "id": "76a59fbe-d899-446d-b52f-27c45b5c0be3",
      "name": "Wait",
      "webhookId": "3d07f095-a6fe-4ff0-abde-8851b17f892c"
    },
    {
      "parameters": {
        "sendTo": "={{ $('0. Ctx & Config').item.json.email }}",
        "subject": "={{ $('2b. Compose Initial Reply').item.json.final_subject }}",
        "message": "={{ $('2b. Compose Initial Reply').item.json.final_body }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [624, 64],
      "id": "1d84fc3b-70a5-45a7-95df-ba12b599242d",
      "name": "Send a message",
      "webhookId": "00830c7f-f5de-49ce-b243-d5cc0c47b996",
      "credentials": {
        "gmailOAuth2": {
          "id": "dRP6U59xFUhSEpp0",
          "name": "Gmail account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO messages (\n  conversation_id,\n  direction,\n  medium,\n  body,\n  external_message_id,\n  meta\n)\nVALUES (\n  $1,\n  'outbound',\n  'email',\n  $2,\n  $3,\n  $4::jsonb\n);",
        "options": {
          "queryReplacement": "={{ [\n  $('0. Ctx & Config').item.json.conversation_id,\n  $('2b. Compose Initial Reply').item.json.final_body,\n  $('Send a message').item.json.id,\n  JSON.stringify({\n    subject: $('2b. Compose Initial Reply').item.json.final_subject,\n    kind: 'initial',\n    template_lang: $('2b. Compose Initial Reply').item.json.template_lang,\n    template_source: $('2b. Compose Initial Reply').item.json.template_source,\n    translation_error: $('2b. Compose Initial Reply').item.json.translation_error,\n    template_ai_errors: $('2b. Compose Initial Reply').item.json.template_ai_errors\n  })\n] }}"
        }
      },
      "name": "4b. Log Outbound Message",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [1232, 48],
      "id": "85cacf43-34c4-4eee-9185-a565950a6b4f",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO tasks (lead_id, type, due_at, notes)\nVALUES ($1, 'schedule_call', NOW() + interval '24 hours', $2);",
        "options": {
          "queryReplacement": "={{ [\n  $('0. Ctx & Config').item.json.lead_id,\n  'Check if ' + ($('0. Ctx & Config').item.json.full_name || 'the new lead') + ' has booked a call or replied.'\n] }}"
        }
      },
      "name": "4c. Create Task: Follow-up",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [1792, 48],
      "id": "9b37c3ad-faa6-4ecb-a857-6799555e5057",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE leads\nSET stage = 'contacted', updated_at = NOW()\nWHERE id = $1;\n\nUPDATE conversations\nSET last_message_at = NOW()\nWHERE id = $2;",
        "options": {
          "queryReplacement": "={{ [\n  $('0. Ctx & Config').item.json.lead_id,\n  $('0. Ctx & Config').item.json.conversation_id\n] }}"
        }
      },
      "name": "4d. Update Lead & Conv. Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [2000, 48],
      "id": "19741004-e740-4554-96c1-9182470817ba",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "combinator": "and",
          "conditions": [
            {
              "leftValue": "={{ $json.error }}",
              "operator": {
                "type": "string",
                "operation": "empty"
              },
              "rightValue": null
            }
          ]
        },
        "options": {}
      },
      "id": "00b74d33-ccc0-4222-92c4-4c20179d23ac",
      "name": "4a. Initial Email Sent?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [848, 64]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_initial_email_failed', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, error: $json.error, template_lang: $('2b. Compose Initial Reply').item.json.template_lang, template_source: $('2b. Compose Initial Reply').item.json.template_source }) ] }}"
        }
      },
      "id": "8a4f2de7-9fde-4488-a83b-1812e69d7aad",
      "name": "4a. Log Initial Email Error",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [1232, 304],
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "-1003017940130",
        "text": "❌ Initial auto-reply failed for {{ $('0. Ctx & Config').item.json.email }}: {{ $json.error?.message || $json.error || 'Unknown error' }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "d2f567c9-6611-4fa4-bec9-28ba3c37d98f",
      "name": "4a. Alert Initial Email Error",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1504, 304],
      "webhookId": "26575138-e845-494c-b7ba-21ae38c6f7b8",
      "credentials": {
        "telegramApi": {
          "id": "DIjzBhPLelPnkz7y",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "errorMessage": "Initial auto-reply failed"
      },
      "id": "e0b1a449-9358-431c-a0bc-58b11dcb13f0",
      "name": "4a. Stop Execution (Initial Email)",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [1776, 304]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_initial_email_sent', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, message_id: $('Send a message').item.json.id, template_lang: $('2b. Compose Initial Reply').item.json.template_lang, template_source: $('2b. Compose Initial Reply').item.json.template_source, translation_error: $('2b. Compose Initial Reply').item.json.translation_error, template_ai_errors: $('2b. Compose Initial Reply').item.json.template_ai_errors }) ] }}"
        }
      },
      "id": "81eb0f4c-0bfa-4bbf-be8d-0c4a010c1d58",
      "name": "4b. Pipeline Event: Initial Email",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [1536, 48],
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'lead_stage_contacted', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id }) ] }}"
        }
      },
      "id": "ad72e9be-0816-42f3-a325-d99c78d35fe9",
      "name": "4e. Pipeline Event: Lead Contacted",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [2240, 48],
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM lead_tags\nWHERE lead_id = $1\n  AND tag_id IN (\n    SELECT id FROM tags WHERE name IN ('followup_1_sent','followup_2_sent','followup_sequence_done')\n  );",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id ] }}"
        }
      },
      "name": "4f. Reset Sequencer Tags",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [2512, 48],
      "id": "e1f04a33-0b4e-448a-844b-c0b1cf6f9d3b",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_followup_scheduled', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ sequence: 'dev_request_default', source: 'crm.proc.dev_request', trigger: 'mkt.proc.sequencer' }) ] }}"
        }
      },
      "name": "4g. Log Sequencer Kick",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [2736, 48],
      "id": "c78962b6-4313-448b-bcd3-ad1cb25fde96",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    }
  ],
  "connections": {
    "[START] dev_request processor": {
      "main": [
        [
          {
            "node": "0. Ctx & Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "0. Ctx & Config": {
      "main": [
        [
          {
            "node": "1a. Load Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1a. Load Template": {
      "main": [
        [
          {
            "node": "1b. IF: Template Found?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1b. IF: Template Found?": {
      "main": [
        [
          {
            "node": "1f. Shape 'True' Path Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "1c-fallback. Load EN Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1c-fallback. Load EN Template": {
      "main": [
        [
          {
            "node": "1d-prep. Prepare AI Prompt Vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1d-prep. Prepare AI Prompt Vars": {
      "main": [
        [
          {
            "node": "1d-translate. AI Translate Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1e. Parse AI JSON": {
      "main": [
        [
          {
            "node": "2. Merge Template Branches",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "1d-translate. AI Translate Template": {
      "main": [
        [
          {
            "node": "1e. Parse AI JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1f. Shape 'True' Path Data": {
      "main": [
        [
          {
            "node": "2. Merge Template Branches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. Merge Template Branches": {
      "main": [
        [
          {
            "node": "2b. Compose Initial Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2b. Compose Initial Reply": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "4a. Initial Email Sent?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4b. Log Outbound Message": {
      "main": [
        [
          {
            "node": "4b. Pipeline Event: Initial Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4c. Create Task: Follow-up": {
      "main": [
        [
          {
            "node": "4d. Update Lead & Conv. Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4d. Update Lead & Conv. Status": {
      "main": [
        [
          {
            "node": "4e. Pipeline Event: Lead Contacted",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4a. Initial Email Sent?": {
      "main": [
        [
          {
            "node": "4b. Log Outbound Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "4a. Log Initial Email Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4a. Log Initial Email Error": {
      "main": [
        [
          {
            "node": "4a. Alert Initial Email Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4a. Alert Initial Email Error": {
      "main": [
        [
          {
            "node": "4a. Stop Execution (Initial Email)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4b. Pipeline Event: Initial Email": {
      "main": [
        [
          {
            "node": "4c. Create Task: Follow-up",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4e. Pipeline Event: Lead Contacted": {
      "main": [
        [
          {
            "node": "4f. Reset Sequencer Tags",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4f. Reset Sequencer Tags": {
      "main": [
        [
          {
            "node": "4g. Log Sequencer Kick",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "69871f35b6454f2fa99c2f68403092fbaef8d3b776d3b26f1ec8ca290a75b807"
  }
}
