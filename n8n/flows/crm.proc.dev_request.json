{
  "nodes": [
    {
      "parameters": {},
      "name": "[START] dev_request processor",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [-10320, 272],
      "id": "3d7c0656-8822-431f-b8fa-c67c1bed20d5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2138a08d-8a50-4bf6-9407-c4667a4e40fe",
              "name": "lead_id",
              "value": "={{ $json.lead_id }}",
              "type": "string"
            },
            {
              "id": "67417578-8316-43c3-8f0d-5f6535d8e7c1",
              "name": "contact_id",
              "value": "={{ $json.contact_id }}",
              "type": "string"
            },
            {
              "id": "d0e1b644-2458-45ac-9b93-875f532a875a",
              "name": "conversation_id",
              "value": "={{ $json.conversation_id }}",
              "type": "string"
            },
            {
              "id": "c1f6b15a-f12b-4ba5-a4f6-7b8ac42c701d",
              "name": "full_name",
              "value": "={{ $json.full_name }}",
              "type": "string"
            },
            {
              "id": "7876a47a-18f6-4171-85b3-3a72d7cf7d0a",
              "name": "email",
              "value": "={{ $json.email }}",
              "type": "string"
            },
            {
              "id": "ab833534-192a-4318-8f85-780c855a8220",
              "name": "lang",
              "value": "={{ ['ru', 'en', 'pl'].includes($json.preferred_lang) ? $json.preferred_lang : 'ru' }}",
              "type": "string"
            },
            {
              "id": "0d1894a7-8f55-46aa-9d52-7b065a4e5113",
              "name": "timezone",
              "value": "={{ $json.timezone || 'Europe/Warsaw' }}",
              "type": "string"
            },
            {
              "id": "df47e58a-a55e-49b5-90a6-121f1816f0ea",
              "name": "calendly_base_url",
              "value": "https://calendly.com/arsenii-ovsianykov-idealogic",
              "type": "string"
            },
            {
              "id": "722125bb-d130-4e55-901c-d70379fd60c7",
              "name": "from_name",
              "value": "Arsenii from Idealogic",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "name": "0. Ctx & Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-10112, 272],
      "id": "50eb1eac-d2b4-427f-b397-34540fc2768b"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT subject_template, body_template FROM templates WHERE name = $1;",
        "options": {
          "queryReplacement": "={{ [ 'dev_request.initial.' + $('0. Ctx & Config').item.json.lang ] }}"
        }
      },
      "name": "1a. Load Template",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-9904, 272],
      "id": "3b3fd395-8454-4cdf-a90d-d33e9a9ecc9c",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $('1a. Load Template').item.json.subject_template }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "1b. IF: Template Found?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-9712, 272],
      "id": "b3d1150d-d217-40ab-9db3-8fc9e9c97fb9"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT subject_template, body_template FROM templates WHERE name = 'dev_request.initial.en';",
        "options": {}
      },
      "name": "1c-fallback. Load EN Template",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-9440, 384],
      "id": "e0e464a1-deac-43da-a5f9-7b8a13f36c08",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8f3e589f-8e54-4712-9c29-3b951167a1aa",
              "name": "en_subject",
              "value": "={{ $('1c-fallback. Load EN Template').item.json.subject_template }}",
              "type": "string"
            },
            {
              "id": "e21b798b-2856-4b95-a22d-6060c4004940",
              "name": "en_body",
              "value": "={{ $('1c-fallback. Load EN Template').item.json.body_template }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "name": "1d-prep. Prepare AI Prompt Vars",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-9232, 384],
      "id": "3e311588-c116-4541-a93d-bc6d08761312"
    },
    {
      "parameters": {
        "jsCode": "const config = $('0. Ctx & Config').item.json;\nconst fallback = $('1c-fallback. Load EN Template').item.json;\n\nif ($json.error) {\n  return [{\n    subject_template: fallback.subject_template,\n    body_template: fallback.body_template,\n    template_source: 'fallback_en',\n    template_lang: 'en',\n    translation_error: $json.error,\n    ai_errors: [],\n  }];\n}\n\nconst rootText = typeof $json.text === 'string' ? $json.text : null;\nconst contentText = $json.content?.[0]?.text ?? null;\nconst text = (rootText ?? contentText ?? '').trim();\n\nif (!text) {\n  return [{\n    subject_template: fallback.subject_template,\n    body_template: fallback.body_template,\n    template_source: 'fallback_en',\n    template_lang: 'en',\n    translation_error: { message: 'Empty response from translator' },\n    ai_errors: [],\n  }];\n}\n\nconst start = text.indexOf('{');\nconst end = text.lastIndexOf('}');\nif (start === -1 || end === -1) {\n  return [{\n    subject_template: fallback.subject_template,\n    body_template: fallback.body_template,\n    template_source: 'fallback_en',\n    template_lang: 'en',\n    translation_error: { message: 'Translator returned no JSON object' },\n    ai_errors: [],\n  }];\n}\n\nconst jsonStr = text.slice(start, end + 1);\nlet parsed;\ntry {\n  parsed = JSON.parse(jsonStr);\n} catch (error) {\n  return [{\n    subject_template: fallback.subject_template,\n    body_template: fallback.body_template,\n    template_source: 'fallback_en',\n    template_lang: 'en',\n    translation_error: { message: error.message },\n    ai_errors: [],\n  }];\n}\n\nconst subject = parsed.subject || fallback.subject_template;\nconst body = parsed.body || fallback.body_template;\n\nreturn [{\n  subject_template: subject,\n  body_template: body,\n  template_source: 'ai_translation',\n  template_lang: config.lang || 'ru',\n  translation_error: null,\n  ai_errors: Array.isArray(parsed.ai_errors) ? parsed.ai_errors : [],\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-8688, 384],
      "name": "1e. Parse AI JSON",
      "id": "6032d89a-6f44-45b4-b988-07d345e3d80f"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "claude-3-5-haiku-20241022",
          "mode": "list",
          "cachedResultName": "claude-3-5-haiku-20241022"
        },
        "messages": {
          "values": [
            {
              "content": "You are a translation API. Your only task is to translate the user's provided JSON content into the specified target language.\n\nRULES:\n1. Translate the text values accurately.\n2. You MUST preserve placeholders like `{{name}}` and `{{calendly_url}}` exactly as they are. DO NOT translate the content inside {{...}}.\n3. Return ONLY a valid, minified JSON object with the exact same keys as the input. No comments, no prose, no explanations.",
              "role": "assistant"
            },
            {
              "content": "=TARGET LANGUAGE: \"{{ $('0. Ctx & Config').item.json.lang }}\"\n---\nJSON TO TRANSLATE:\n{\n  \"subject\": \"{{ $('1d-prep. Prepare AI Prompt Vars').item.json.en_subject }}\",\n  \"body\": \"{{ $('1d-prep. Prepare AI Prompt Vars').item.json.en_body }}\"\n}"
            }
          ]
        },
        "options": {}
      },
      "name": "1d-translate. AI Translate Template",
      "type": "@n8n/n8n-nodes-langchain.anthropic",
      "typeVersion": 1,
      "position": [-9024, 384],
      "id": "7a0b0ae4-6b63-4a93-b3a5-a2bb57623b6f",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "anthropicApi": {
          "id": "GIfdwzVM7KrSSX07",
          "name": "Anthropic account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e0b5f1f0-4e58-4e89-913a-a1b9b9423c8e",
              "name": "=subject_template",
              "value": "={{ $('1a. Load Template').item.json.subject_template }}",
              "type": "string"
            },
            {
              "id": "18c8b6d8-b391-4470-a38f-6fd6a8e805f1",
              "name": "body_template",
              "value": "={{ $('1a. Load Template').item.json.body_template }}",
              "type": "string"
            },
            {
              "id": "23318de4-eb9e-4cdb-a21a-19e009fa0690",
              "name": "template_source",
              "type": "string",
              "value": "db_template"
            },
            {
              "id": "21c2d39a-242a-47e1-95b4-d1e24241e567",
              "name": "template_lang",
              "type": "string",
              "value": "={{ $('0. Ctx & Config').item.json.lang }}"
            },
            {
              "id": "0557c2be-801a-433f-9d84-41c03c72423e",
              "name": "translation_error",
              "type": "string",
              "value": "={{ null }}"
            },
            {
              "id": "002dbf32-8c28-4f34-8001-73df1996572b",
              "name": "ai_errors",
              "type": "array",
              "value": "={{ [] }}"
            }
          ]
        },
        "options": {}
      },
      "name": "1f. Shape 'True' Path Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-9440, 176],
      "id": "b11b853d-d373-467c-973c-075e08e510dd"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "name": "2. Merge Template Branches",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-8448, 192],
      "id": "fa3facd9-99c5-43c1-8c41-556dabf0be9d"
    },
    {
      "parameters": {
        "jsCode": "const config = $('0. Ctx & Config').item.json;\nconst template = $('2. Merge Template Branches').item.json;\n\nconst subjectText = template.subject_template || template.subject;\nconst bodyText = template.body_template || template.body;\n\nif (typeof subjectText !== 'string' || typeof bodyText !== 'string') {\n  throw new Error('Could not find subject or body text in the template payload.');\n}\n\nconst clientName = config.full_name || 'there';\nconst fromName = config.from_name || 'Team';\nconst calendlyUrl = config.calendly_base_url || '';\n\nlet finalSubject = subjectText.replace(/{{name}}/g, clientName);\nlet finalBody = bodyText\n  .replace(/{{name}}/g, clientName)\n  .replace(/{{calendly_url}}/g, calendlyUrl)\n  .replace(/{{from_name}}/g, fromName);\n\nreturn [{\n  ...$item.json,\n  final_subject: finalSubject,\n  final_body: finalBody,\n  template_lang: template.template_lang || config.lang || 'ru',\n  template_source: template.template_source || 'db_template',\n  translation_error: template.translation_error || null,\n  template_ai_errors: template.ai_errors || [],\n}];"
      },
      "name": "2b. Compose Initial Reply",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-8240, 192],
      "id": "3fbfa4b8-f80b-435f-9ff2-4df94a066efa"
    },
    {
      "parameters": {
        "amount": "={{ Math.floor(Math.random() * 5) + 1 }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [-8032, 192],
      "id": "005d240e-0f38-406d-8f3f-9c5eb3ef8714",
      "name": "Wait",
      "webhookId": "3d07f095-a6fe-4ff0-abde-8851b17f892c"
    },
    {
      "parameters": {
        "sendTo": "={{ $('0. Ctx & Config').item.json.email }}",
        "subject": "={{ $('2b. Compose Initial Reply').item.json.final_subject }}",
        "message": "={{ $('2b. Compose Initial Reply').item.json.final_body }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [-7824, 192],
      "id": "1f625690-abf1-4359-bbc0-59711e759c90",
      "name": "Send a message",
      "webhookId": "00830c7f-f5de-49ce-b243-d5cc0c47b996",
      "credentials": {
        "gmailOAuth2": {
          "id": "dRP6U59xFUhSEpp0",
          "name": "Gmail account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO messages (\n  conversation_id,\n  direction,\n  medium,\n  body,\n  external_message_id,\n  meta\n)\nVALUES (\n  $1,\n  'outbound',\n  'email',\n  $2,\n  $3,\n  $4::jsonb\n);",
        "options": {
          "queryReplacement": "={{ [\n  $('0. Ctx & Config').item.json.conversation_id,\n  $('2b. Compose Initial Reply').item.json.final_body,\n  $('Send a message').item.json.id,\n  JSON.stringify({\n    subject: $('2b. Compose Initial Reply').item.json.final_subject,\n    kind: 'initial',\n    template_lang: $('2b. Compose Initial Reply').item.json.template_lang,\n    template_source: $('2b. Compose Initial Reply').item.json.template_source,\n    translation_error: $('2b. Compose Initial Reply').item.json.translation_error,\n    template_ai_errors: $('2b. Compose Initial Reply').item.json.template_ai_errors\n  })\n] }}"
        }
      },
      "name": "4b. Log Outbound Message",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-7216, 176],
      "id": "5a513027-5a23-4538-856a-1b58eb81e1d3",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO tasks (lead_id, type, due_at, notes)\nVALUES ($1, 'schedule_call', NOW() + interval '24 hours', $2);",
        "options": {
          "queryReplacement": "={{ [\n  $('0. Ctx & Config').item.json.lead_id,\n  'Check if ' + ($('0. Ctx & Config').item.json.full_name || 'the new lead') + ' has booked a call or replied.'\n] }}"
        }
      },
      "name": "4c. Create Task: Follow-up",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-6656, 176],
      "id": "340ca34f-7619-4eae-bb65-93d47a135012",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE leads\nSET stage = 'contacted', updated_at = NOW()\nWHERE id = $1;\n\nUPDATE conversations\nSET last_message_at = NOW()\nWHERE id = $2;",
        "options": {
          "queryReplacement": "={{ [\n  $('0. Ctx & Config').item.json.lead_id,\n  $('0. Ctx & Config').item.json.conversation_id\n] }}"
        }
      },
      "name": "4d. Update Lead & Conv. Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-6448, 176],
      "id": "c624334d-4028-4def-952c-3f4faaf33369",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "amount": 24,
        "unit": "hours"
      },
      "name": "5a. Wait 24h Before Follow-up",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [-5984, 176],
      "id": "6fc18707-9149-413c-b765-14bd15c606f8",
      "webhookId": "8f44cb24-a321-4733-b91c-87d88eae8d66"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  EXISTS (\n    SELECT 1 FROM bookings\n    WHERE lead_id = $1\n      AND status IN ('scheduled','rescheduled','attended')\n      AND scheduled_start >= NOW() - interval '30 days'\n  ) AS has_booking,\n  EXISTS (\n    SELECT 1 FROM messages\n    WHERE conversation_id = $2\n      AND direction = 'inbound'\n      AND message_ts >= NOW() - interval '7 days'\n  ) AS has_inbound_reply;",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, $('0. Ctx & Config').item.json.conversation_id ] }}"
        }
      },
      "name": "5b. Check Engagement (24h)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-5776, 176],
      "id": "b67bcfc7-d29f-4f46-a587-20ad8c2bda1b",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ ($('5b. Check Engagement (24h)').item.json.has_booking || $('5b. Check Engagement (24h)').item.json.has_inbound_reply) ? 'true' : 'false' }}",
              "operation": "isEqual",
              "value2": "true"
            }
          ]
        }
      },
      "name": "5c. Need Follow-up #1?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-5568, 176],
      "id": "14120cad-7ea4-4152-bfc2-6cdb1dbcf557"
    },
    {
      "parameters": {
        "jsCode": "\nconst ctx = $('0. Ctx & Config').item.json;\nconst lang = ['ru','en','pl'].includes(ctx.lang) ? ctx.lang : 'ru';\nconst name = ctx.full_name || 'there';\nconst calendly = ctx.calendly_base_url || 'https://calendly.com/arsenii-ovsianykov-idealogic';\nconst fromName = ctx.from_name || 'Team';\n\nconst templates = {\n  ru: {\n    subject: 'Напомню про звонок',\n    body: `Привет, {{name}}!\\n\\nВчера отправляли письмо с вопросами и ссылкой на календарь. Дайте знать, если удобно созвониться — можно сразу забронировать слот: {{calendly_url}}.\\n\\nЕсли нужен другой формат или время, просто ответьте на это письмо.\\n\\nСпасибо!\\n{{from_name}}`\n  },\n  en: {\n    subject: 'Quick follow-up about our call',\n    body: `Hi {{name}},\\n\\nYesterday we sent over a few scoping questions and a Calendly link. Happy to jump on a call whenever it suits you: {{calendly_url}}.\\n\\nIf another format or time works better, just hit reply — we'll adjust.\\n\\nThanks!\\n{{from_name}}`\n  },\n  pl: {\n    subject: 'Przypomnienie o rozmowie',\n    body: `Cześć {{name}}!\\n\\nWczoraj wysłaliśmy kilka pytań oraz link do kalendarza. Jeśli pasuje Ci rozmowa, zarezerwuj dogodny termin: {{calendly_url}}.\\n\\nGdyby lepsza była inna forma kontaktu lub godzina, odpisz proszę na tę wiadomość.\\n\\nDzięki!\\n{{from_name}}`\n  }\n};\n\nconst tpl = templates[lang];\nfunction apply(str){\n  return str\n    .replace(/{{name}}/g, name)\n    .replace(/{{calendly_url}}/g, calendly)\n    .replace(/{{from_name}}/g, fromName);\n}\n\nreturn [{\n  followup_subject: apply(tpl.subject),\n  followup_body: apply(tpl.body),\n  followup_lang: lang\n}];\n"
      },
      "name": "5d. Compose Follow-up #1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-5360, 48],
      "id": "8750b449-fa1b-4fd7-aa3c-442fade0ce88"
    },
    {
      "parameters": {
        "amount": "={{ Math.floor(Math.random() * 6) + 3 }}",
        "unit": "minutes"
      },
      "name": "5e. Humanize Delay #1",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [-5152, 48],
      "id": "42a38637-762f-4e2e-889a-84a5abfa7100",
      "webhookId": "1c715e43-40ea-44cb-96ec-4a18d1042b1f"
    },
    {
      "parameters": {
        "sendTo": "={{ $('0. Ctx & Config').item.json.email }}",
        "subject": "={{ $('5d. Compose Follow-up #1').item.json.followup_subject }}",
        "message": "={{ $('5d. Compose Follow-up #1').item.json.followup_body }}",
        "options": {
          "appendAttribution": false
        }
      },
      "name": "5f. Send Follow-up #1",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [-4944, 48],
      "id": "bc89e11b-0068-481a-9653-0a7426e64f3e",
      "webhookId": "87349fff-c7a9-4e0e-a611-7ee55d268bae",
      "credentials": {
        "gmailOAuth2": {
          "id": "dRP6U59xFUhSEpp0",
          "name": "Gmail account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO messages (conversation_id, direction, medium, body, external_message_id, meta)\nVALUES ($1, 'outbound', 'email', $2, $3, $4::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.conversation_id, $('5d. Compose Follow-up #1').item.json.followup_body, $('5f. Send Follow-up #1').item.json.id, JSON.stringify({ subject: $('5d. Compose Follow-up #1').item.json.followup_subject, kind: 'followup_1', template_lang: $('5d. Compose Follow-up #1').item.json.followup_lang }) ] }}"
        }
      },
      "name": "5g. Log Follow-up #1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-4320, -208],
      "id": "2c365f11-a42c-43ad-8e91-e9ff4e73d657",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "amount": 48,
        "unit": "hours"
      },
      "name": "6a. Wait 48h Before Follow-up",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [-3808, 336],
      "id": "8c417ecc-1cc4-41ae-8d73-a265934cbd48",
      "webhookId": "f442c1c5-9d7d-4aad-98fd-86ffc967deee"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  EXISTS (\n    SELECT 1 FROM bookings\n    WHERE lead_id = $1\n      AND status IN ('scheduled','rescheduled','attended')\n      AND scheduled_start >= NOW() - interval '30 days'\n  ) AS has_booking,\n  EXISTS (\n    SELECT 1 FROM messages\n    WHERE conversation_id = $2\n      AND direction = 'inbound'\n      AND message_ts >= NOW() - interval '7 days'\n  ) AS has_inbound_reply;",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, $('0. Ctx & Config').item.json.conversation_id ] }}"
        }
      },
      "name": "6b. Re-check Engagement (72h)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-3600, 336],
      "id": "a22016a3-dbd4-4c3a-855a-dde92179ad5f",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ ($('6b. Re-check Engagement (72h)').item.json.has_booking || $('6b. Re-check Engagement (72h)').item.json.has_inbound_reply) ? 'true' : 'false' }}",
              "operation": "isEqual",
              "value2": "true"
            }
          ]
        }
      },
      "name": "6c. Need Follow-up #2?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-3344, 336],
      "id": "8ef1ee48-b40a-4acd-b587-3772cb4d6758"
    },
    {
      "parameters": {
        "jsCode": "\nconst ctx = $('0. Ctx & Config').item.json;\nconst lang = ['ru','en','pl'].includes(ctx.lang) ? ctx.lang : 'ru';\nconst name = ctx.full_name || 'there';\nconst calendly = ctx.calendly_base_url || 'https://calendly.com/arsenii-ovsianykov-idealogic';\nconst fromName = ctx.from_name || 'Team';\n\nconst templates = {\n  ru: {\n    subject: 'Оставить заявку ещё актуально?',\n    body: `{{name}}, добрый день!\\n\\nХотим убедиться, что вы получили наши прошлые письма. Мы готовы подключиться и обсудить задачу — можно выбрать время тут: {{calendly_url}}.\\n\\nЕсли приоритеты поменялись, просто дайте знать, чтобы мы обновили статус.\\n\\nХорошего дня!\\n{{from_name}}`\n  },\n  en: {\n    subject: 'Should we keep the slot on hold?',\n    body: `Hi {{name}},\\n\\nChecking in in case the previous emails got lost. We can jump on a quick call whenever you're ready — here is the calendar again: {{calendly_url}}.\\n\\nIf plans changed, just let us know and we'll update our pipeline.\\n\\nAll the best,\\n{{from_name}}`\n  },\n  pl: {\n    subject: 'Czy rozmowa jest wciąż aktualna?',\n    body: `Cześć {{name}}!\\n\\nSprawdzamy, czy nasze poprzednie wiadomości dotarły. Chętnie porozmawiamy — możesz wybrać termin tutaj: {{calendly_url}}.\\n\\nJeśli priorytety się zmieniły, daj nam znać, zaktualizujemy status.\\n\\nPozdrawiam,\\n{{from_name}}`\n  }\n};\n\nconst tpl = templates[lang];\nfunction apply(str){\n  return str\n    .replace(/{{name}}/g, name)\n    .replace(/{{calendly_url}}/g, calendly)\n    .replace(/{{from_name}}/g, fromName);\n}\n\nreturn [{\n  followup_subject: apply(tpl.subject),\n  followup_body: apply(tpl.body),\n  followup_lang: lang\n}];\n"
      },
      "name": "6d. Compose Follow-up #2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-3072, -48],
      "id": "28506452-c6d1-4021-bfd1-172a1fa3a3da"
    },
    {
      "parameters": {
        "amount": "={{ Math.floor(Math.random() * 6) + 3 }}",
        "unit": "minutes"
      },
      "name": "6e. Humanize Delay #2",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [-2864, -48],
      "id": "c6ad7b6d-c8ef-4748-8fc0-c65cc7693fc9",
      "webhookId": "9a90cdb8-4818-4128-a556-89967a0703f8"
    },
    {
      "parameters": {
        "sendTo": "={{ $('0. Ctx & Config').item.json.email }}",
        "subject": "={{ $('6d. Compose Follow-up #2').item.json.followup_subject }}",
        "message": "={{ $('6d. Compose Follow-up #2').item.json.followup_body }}",
        "options": {
          "appendAttribution": false
        }
      },
      "name": "6f. Send Follow-up #2",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [-2656, -48],
      "id": "fffecffa-138e-44c9-a56d-05957c90dc0e",
      "webhookId": "7cefe047-3f70-4a9b-8f2d-a2d9cbcc5a29",
      "credentials": {
        "gmailOAuth2": {
          "id": "dRP6U59xFUhSEpp0",
          "name": "Gmail account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO messages (conversation_id, direction, medium, body, external_message_id, meta)\nVALUES ($1, 'outbound', 'email', $2, $3, $4::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.conversation_id, $('6d. Compose Follow-up #2').item.json.followup_body, $('6f. Send Follow-up #2').item.json.id, JSON.stringify({ subject: $('6d. Compose Follow-up #2').item.json.followup_subject, kind: 'followup_2', template_lang: $('6d. Compose Follow-up #2').item.json.followup_lang }) ] }}"
        }
      },
      "name": "6g. Log Follow-up #2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-2208, -304],
      "id": "6e1b73dd-716e-4926-a646-22152db17fae",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.error }}",
              "operation": "isEmpty"
            }
          ]
        }
      },
      "id": "046a47e2-1f13-4bac-8c74-0f7d3aa987b5",
      "name": "4a. Initial Email Sent?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-7600, 192]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_initial_email_failed', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, error: $json.error, template_lang: $('2b. Compose Initial Reply').item.json.template_lang, template_source: $('2b. Compose Initial Reply').item.json.template_source }) ] }}"
        }
      },
      "id": "c38905d3-1904-42b6-b2fa-10fa24a72d4d",
      "name": "4a. Log Initial Email Error",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-7216, 432],
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "-1003017940130",
        "text": "❌ Initial auto-reply failed for {{ $('0. Ctx & Config').item.json.email }}: {{ $json.error?.message || $json.error || 'Unknown error' }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "e06f404d-577c-4a5d-8d98-505942b7dc66",
      "name": "4a. Alert Initial Email Error",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [-6944, 432],
      "webhookId": "26575138-e845-494c-b7ba-21ae38c6f7b8",
      "credentials": {
        "telegramApi": {
          "id": "DIjzBhPLelPnkz7y",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "errorMessage": "Initial auto-reply failed"
      },
      "id": "d7b48303-de95-4295-8a4e-1cf30817a7ba",
      "name": "4a. Stop Execution (Initial Email)",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [-6672, 432]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_initial_email_sent', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, message_id: $('Send a message').item.json.id, template_lang: $('2b. Compose Initial Reply').item.json.template_lang, template_source: $('2b. Compose Initial Reply').item.json.template_source, translation_error: $('2b. Compose Initial Reply').item.json.translation_error, template_ai_errors: $('2b. Compose Initial Reply').item.json.template_ai_errors }) ] }}"
        }
      },
      "id": "e53ae50d-9c0e-44ff-9ff7-cffea758f82b",
      "name": "4b. Pipeline Event: Initial Email",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-6912, 176],
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'lead_stage_contacted', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id }) ] }}"
        }
      },
      "id": "88f7aa15-6e69-4c91-a5d1-9cd87f856c6f",
      "name": "4e. Pipeline Event: Lead Contacted",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-6208, 176],
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.error }}",
              "operation": "isEmpty"
            }
          ]
        }
      },
      "id": "454e486e-da13-4dc8-b416-c59c4d567822",
      "name": "5f. Follow-up #1 Sent?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-4688, 64]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_followup1_failed', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, error: $json.error }) ] }}"
        }
      },
      "id": "c6743f8f-6849-4f45-a69a-6c77f7d54c3d",
      "name": "5f. Log Follow-up #1 Error",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-4336, 96],
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "-1003017940130",
        "text": "❌ Follow-up #1 failed for {{ $('0. Ctx & Config').item.json.email }}: {{ $json.error?.message || $json.error || 'Unknown error' }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "18315897-d9b9-41c9-9022-84e7599075b6",
      "name": "5f. Alert Follow-up #1 Error",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [-4096, 96],
      "webhookId": "d8b9501a-76ce-44b2-a0f2-bd155d68c13f",
      "credentials": {
        "telegramApi": {
          "id": "DIjzBhPLelPnkz7y",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "errorMessage": "Follow-up #1 email failed"
      },
      "id": "1fb3ed65-faf3-461c-9f67-dd5ab0627095",
      "name": "5f. Stop Execution (FU1)",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [-3808, 96]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_followup1_sent', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, message_id: $('5f. Send Follow-up #1').item.json.id, template_lang: $('5d. Compose Follow-up #1').item.json.followup_lang }) ] }}"
        }
      },
      "id": "f8d2aada-8bcb-4883-86d5-227c415a8b7f",
      "name": "5g. Pipeline Event: Follow-up #1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-4080, -208],
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_followup1_skipped', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, reason: 'engaged_within_24h' }) ] }}"
        }
      },
      "id": "3614edb0-b03c-4b18-ac66-6b2d1906db1b",
      "name": "5c. Pipeline Event: Skip FU#1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-5184, 192],
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.error }}",
              "operation": "isEmpty"
            }
          ]
        }
      },
      "id": "327c6c77-8636-4723-97af-71739fb9bff3",
      "name": "6f. Follow-up #2 Sent?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-2464, -48]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_followup2_failed', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, error: $json.error }) ] }}"
        }
      },
      "id": "73a56b2e-a03e-4a13-a167-eeed32d8de21",
      "name": "6f. Log Follow-up #2 Error",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-2208, -32],
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "-1003017940130",
        "text": "❌ Follow-up #2 failed for {{ $('0. Ctx & Config').item.json.email }}: {{ $json.error?.message || $json.error || 'Unknown error' }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "0d1f263d-9b30-4be1-a00a-6cc6031c85b5",
      "name": "6f. Alert Follow-up #2 Error",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [-1984, -32],
      "webhookId": "a8263006-0df4-46f8-80a6-c39c2285bebb",
      "credentials": {
        "telegramApi": {
          "id": "DIjzBhPLelPnkz7y",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "errorMessage": "Follow-up #2 email failed"
      },
      "id": "ee26078c-34a2-4243-9b68-4b00998304a1",
      "name": "6f. Stop Execution (FU2)",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [-1760, -32]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_followup2_sent', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, message_id: $('6f. Send Follow-up #2').item.json.id, template_lang: $('6d. Compose Follow-up #2').item.json.followup_lang }) ] }}"
        }
      },
      "id": "0ee9f96c-af0f-4ece-8e12-f46f4fb1a53d",
      "name": "6g. Pipeline Event: Follow-up #2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-1984, -304],
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_followup2_skipped', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, reason: 'engaged_within_72h' }) ] }}"
        }
      },
      "id": "4fe07994-45a0-4201-ab9b-76bb8201fe06",
      "name": "6c. Pipeline Event: Skip FU#2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-3072, 352],
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    }
  ],
  "connections": {
    "[START] dev_request processor": {
      "main": [
        [
          {
            "node": "0. Ctx & Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "0. Ctx & Config": {
      "main": [
        [
          {
            "node": "1a. Load Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1a. Load Template": {
      "main": [
        [
          {
            "node": "1b. IF: Template Found?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1b. IF: Template Found?": {
      "main": [
        [
          {
            "node": "1f. Shape 'True' Path Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "1c-fallback. Load EN Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1c-fallback. Load EN Template": {
      "main": [
        [
          {
            "node": "1d-prep. Prepare AI Prompt Vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1d-prep. Prepare AI Prompt Vars": {
      "main": [
        [
          {
            "node": "1d-translate. AI Translate Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1e. Parse AI JSON": {
      "main": [
        [
          {
            "node": "2. Merge Template Branches",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "1d-translate. AI Translate Template": {
      "main": [
        [
          {
            "node": "1e. Parse AI JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1f. Shape 'True' Path Data": {
      "main": [
        [
          {
            "node": "2. Merge Template Branches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. Merge Template Branches": {
      "main": [
        [
          {
            "node": "2b. Compose Initial Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2b. Compose Initial Reply": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "4a. Initial Email Sent?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4b. Log Outbound Message": {
      "main": [
        [
          {
            "node": "4b. Pipeline Event: Initial Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4c. Create Task: Follow-up": {
      "main": [
        [
          {
            "node": "4d. Update Lead & Conv. Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4d. Update Lead & Conv. Status": {
      "main": [
        [
          {
            "node": "4e. Pipeline Event: Lead Contacted",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5a. Wait 24h Before Follow-up": {
      "main": [
        [
          {
            "node": "5b. Check Engagement (24h)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5b. Check Engagement (24h)": {
      "main": [
        [
          {
            "node": "5c. Need Follow-up #1?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5c. Need Follow-up #1?": {
      "main": [
        [
          {
            "node": "5d. Compose Follow-up #1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "5c. Pipeline Event: Skip FU#1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5d. Compose Follow-up #1": {
      "main": [
        [
          {
            "node": "5e. Humanize Delay #1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5e. Humanize Delay #1": {
      "main": [
        [
          {
            "node": "5f. Send Follow-up #1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5f. Send Follow-up #1": {
      "main": [
        [
          {
            "node": "5f. Follow-up #1 Sent?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5g. Log Follow-up #1": {
      "main": [
        [
          {
            "node": "5g. Pipeline Event: Follow-up #1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6a. Wait 48h Before Follow-up": {
      "main": [
        [
          {
            "node": "6b. Re-check Engagement (72h)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6b. Re-check Engagement (72h)": {
      "main": [
        [
          {
            "node": "6c. Need Follow-up #2?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6c. Need Follow-up #2?": {
      "main": [
        [
          {
            "node": "6d. Compose Follow-up #2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "6c. Pipeline Event: Skip FU#2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6d. Compose Follow-up #2": {
      "main": [
        [
          {
            "node": "6e. Humanize Delay #2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6e. Humanize Delay #2": {
      "main": [
        [
          {
            "node": "6f. Send Follow-up #2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6f. Send Follow-up #2": {
      "main": [
        [
          {
            "node": "6f. Follow-up #2 Sent?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6g. Log Follow-up #2": {
      "main": [
        [
          {
            "node": "6g. Pipeline Event: Follow-up #2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4a. Initial Email Sent?": {
      "main": [
        [
          {
            "node": "4b. Log Outbound Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "4a. Log Initial Email Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4a. Log Initial Email Error": {
      "main": [
        [
          {
            "node": "4a. Alert Initial Email Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4a. Alert Initial Email Error": {
      "main": [
        [
          {
            "node": "4a. Stop Execution (Initial Email)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4b. Pipeline Event: Initial Email": {
      "main": [
        [
          {
            "node": "4c. Create Task: Follow-up",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4e. Pipeline Event: Lead Contacted": {
      "main": [
        [
          {
            "node": "5a. Wait 24h Before Follow-up",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5f. Follow-up #1 Sent?": {
      "main": [
        [
          {
            "node": "5g. Log Follow-up #1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "5f. Log Follow-up #1 Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5f. Log Follow-up #1 Error": {
      "main": [
        [
          {
            "node": "5f. Alert Follow-up #1 Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5f. Alert Follow-up #1 Error": {
      "main": [
        [
          {
            "node": "5f. Stop Execution (FU1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5g. Pipeline Event: Follow-up #1": {
      "main": [
        [
          {
            "node": "6a. Wait 48h Before Follow-up",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5c. Pipeline Event: Skip FU#1": {
      "main": [
        [
          {
            "node": "6a. Wait 48h Before Follow-up",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6f. Follow-up #2 Sent?": {
      "main": [
        [
          {
            "node": "6g. Log Follow-up #2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "6f. Log Follow-up #2 Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6f. Log Follow-up #2 Error": {
      "main": [
        [
          {
            "node": "6f. Alert Follow-up #2 Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6f. Alert Follow-up #2 Error": {
      "main": [
        [
          {
            "node": "6f. Stop Execution (FU2)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "69871f35b6454f2fa99c2f68403092fbaef8d3b776d3b26f1ec8ca290a75b807"
  }
}
