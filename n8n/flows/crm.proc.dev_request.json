{
  "nodes": [
    {
      "parameters": {},
      "name": "[START] dev_request processor",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -16,
        0
      ],
      "id": "59be16cb-cc13-4f5c-80de-b8ae8e104c13"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2138a08d-8a50-4bf6-9407-c4667a4e40fe",
              "name": "lead_id",
              "value": "={{ $json.lead_id }}",
              "type": "string"
            },
            {
              "id": "67417578-8316-43c3-8f0d-5f6535d8e7c1",
              "name": "contact_id",
              "value": "={{ $json.contact_id }}",
              "type": "string"
            },
            {
              "id": "d0e1b644-2458-45ac-9b93-875f532a875a",
              "name": "conversation_id",
              "value": "={{ $json.conversation_id }}",
              "type": "string"
            },
            {
              "id": "c1f6b15a-f12b-4ba5-a4f6-7b8ac42c701d",
              "name": "full_name",
              "value": "={{ $json.full_name }}",
              "type": "string"
            },
            {
              "id": "7876a47a-18f6-4171-85b3-3a72d7cf7d0a",
              "name": "email",
              "value": "={{ $json.email }}",
              "type": "string"
            },
            {
              "id": "ab833534-192a-4318-8f85-780c855a8220",
              "name": "lang",
              "value": "={{ ['ru', 'en', 'pl'].includes($json.preferred_lang) ? $json.preferred_lang : 'ru' }}",
              "type": "string"
            },
            {
              "id": "0d1894a7-8f55-46aa-9d52-7b065a4e5113",
              "name": "timezone",
              "value": "={{ $json.timezone || 'Europe/Warsaw' }}",
              "type": "string"
            },
            {
              "id": "df47e58a-a55e-49b5-90a6-121f1816f0ea",
              "name": "calendly_base_url",
              "value": "https://calendly.com/arsenii-ovsianykov-idealogic",
              "type": "string"
            },
            {
              "id": "722125bb-d130-4e55-901c-d70379fd60c7",
              "name": "from_name",
              "value": "Arsenii from Idealogic",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "name": "0. Ctx & Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        192,
        0
      ],
      "id": "3946ade5-25f0-46d7-9b95-a53d55880f77"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT subject_template, body_template FROM templates WHERE name = $1;",
        "options": {
          "queryReplacement": "={{ [ 'dev_request.initial.' + $('0. Ctx & Config').item.json.lang ] }}"
        }
      },
      "name": "1a. Load Template",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        400,
        0
      ],
      "id": "b2a4f332-fd82-42bd-81ed-d7fd9733e5a3",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $('1a. Load Template').item.json.subject_template }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "name": "1b. IF: Template Found?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        592,
        0
      ],
      "id": "3fac7349-da2a-451a-be0b-25ac6cf4a028"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT subject_template, body_template FROM templates WHERE name = 'dev_request.initial.en';",
        "options": {}
      },
      "name": "1c-fallback. Load EN Template",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        864,
        112
      ],
      "id": "f556efe0-f454-4077-a966-e4b3dd7e02a7",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8f3e589f-8e54-4712-9c29-3b951167a1aa",
              "name": "en_subject",
              "value": "={{ $('1c-fallback. Load EN Template').item.json.subject_template }}",
              "type": "string"
            },
            {
              "id": "e21b798b-2856-4b95-a22d-6060c4004940",
              "name": "en_body",
              "value": "={{ $('1c-fallback. Load EN Template').item.json.body_template }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "name": "1d-prep. Prepare AI Prompt Vars",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1072,
        112
      ],
      "id": "1b9f52c0-722f-404c-8089-0a4b0cd2d472"
    },
    {
      "parameters": {
        "jsCode": "const config = $('0. Ctx & Config').item.json;\nconst fallback = $('1c-fallback. Load EN Template').item.json;\n\nif ($json.error) {\n  return [{\n    subject_template: fallback.subject_template,\n    body_template: fallback.body_template,\n    template_source: 'fallback_en',\n    template_lang: 'en',\n    translation_error: $json.error,\n    ai_errors: [],\n  }];\n}\n\nconst rootText = typeof $json.text === 'string' ? $json.text : null;\nconst contentText = $json.content?.[0]?.text ?? null;\nconst text = (rootText ?? contentText ?? '').trim();\n\nif (!text) {\n  return [{\n    subject_template: fallback.subject_template,\n    body_template: fallback.body_template,\n    template_source: 'fallback_en',\n    template_lang: 'en',\n    translation_error: { message: 'Empty response from translator' },\n    ai_errors: [],\n  }];\n}\n\nconst start = text.indexOf('{');\nconst end = text.lastIndexOf('}');\nif (start === -1 || end === -1) {\n  return [{\n    subject_template: fallback.subject_template,\n    body_template: fallback.body_template,\n    template_source: 'fallback_en',\n    template_lang: 'en',\n    translation_error: { message: 'Translator returned no JSON object' },\n    ai_errors: [],\n  }];\n}\n\nconst jsonStr = text.slice(start, end + 1);\nlet parsed;\ntry {\n  parsed = JSON.parse(jsonStr);\n} catch (error) {\n  return [{\n    subject_template: fallback.subject_template,\n    body_template: fallback.body_template,\n    template_source: 'fallback_en',\n    template_lang: 'en',\n    translation_error: { message: error.message },\n    ai_errors: [],\n  }];\n}\n\nconst subject = parsed.subject || fallback.subject_template;\nconst body = parsed.body || fallback.body_template;\n\nreturn [{\n  subject_template: subject,\n  body_template: body,\n  template_source: 'ai_translation',\n  template_lang: config.lang || 'ru',\n  translation_error: null,\n  ai_errors: Array.isArray(parsed.ai_errors) ? parsed.ai_errors : [],\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1616,
        112
      ],
      "name": "1e. Parse AI JSON",
      "id": "1842fcf4-dae0-45d5-83b4-ac7acfb7266f"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "claude-3-5-haiku-20241022",
          "mode": "list",
          "cachedResultName": "claude-3-5-haiku-20241022"
        },
        "messages": {
          "values": [
            {
              "content": "You are a translation API. Your only task is to translate the user's provided JSON content into the specified target language.\n\nRULES:\n1. Translate the text values accurately.\n2. You MUST preserve placeholders like `{{name}}` and `{{calendly_url}}` exactly as they are. DO NOT translate the content inside {{...}}.\n3. Return ONLY a valid, minified JSON object with the exact same keys as the input. No comments, no prose, no explanations.",
              "role": "assistant"
            },
            {
              "content": "=TARGET LANGUAGE: \"{{ $('0. Ctx & Config').item.json.lang }}\"\n---\nJSON TO TRANSLATE:\n{\n  \"subject\": \"{{ $('1d-prep. Prepare AI Prompt Vars').item.json.en_subject }}\",\n  \"body\": \"{{ $('1d-prep. Prepare AI Prompt Vars').item.json.en_body }}\"\n}"
            }
          ]
        },
        "options": {}
      },
      "name": "1d-translate. AI Translate Template",
      "type": "@n8n/n8n-nodes-langchain.anthropic",
      "typeVersion": 1,
      "position": [
        1280,
        112
      ],
      "id": "3a3e7260-0120-4c08-9b6a-6c1c5a41558d",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "anthropicApi": {
          "id": "GIfdwzVM7KrSSX07",
          "name": "Anthropic account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e0b5f1f0-4e58-4e89-913a-a1b9b9423c8e",
              "name": "=subject_template",
              "value": "={{ $('1a. Load Template').item.json.subject_template }}",
              "type": "string"
            },
            {
              "id": "18c8b6d8-b391-4470-a38f-6fd6a8e805f1",
              "name": "body_template",
              "value": "={{ $('1a. Load Template').item.json.body_template }}",
              "type": "string"
            },
            {
              "id": "23318de4-eb9e-4cdb-a21a-19e009fa0690",
              "name": "template_source",
              "type": "string",
              "value": "db_template"
            },
            {
              "id": "21c2d39a-242a-47e1-95b4-d1e24241e567",
              "name": "template_lang",
              "type": "string",
              "value": "={{ $('0. Ctx & Config').item.json.lang }}"
            },
            {
              "id": "0557c2be-801a-433f-9d84-41c03c72423e",
              "name": "translation_error",
              "type": "string",
              "value": "={{ null }}"
            },
            {
              "id": "002dbf32-8c28-4f34-8001-73df1996572b",
              "name": "ai_errors",
              "type": "array",
              "value": "={{ [] }}"
            }
          ]
        },
        "options": {}
      },
      "name": "1f. Shape 'True' Path Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        864,
        -96
      ],
      "id": "c96111c2-3b50-4715-ab50-13cfb0c7696f"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "name": "2. Merge Template Branches",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1856,
        -80
      ],
      "id": "bda818f2-a508-4333-b5c2-b3d2673901b5"
    },
    {
      "parameters": {
        "jsCode": "const config = $('0. Ctx & Config').item.json;\nconst template = $('2. Merge Template Branches').item.json;\n\nconst subjectText = template.subject_template || template.subject;\nconst bodyText = template.body_template || template.body;\n\nif (typeof subjectText !== 'string' || typeof bodyText !== 'string') {\n  throw new Error('Could not find subject or body text in the template payload.');\n}\n\nconst clientName = config.full_name || 'there';\nconst fromName = config.from_name || 'Team';\nconst calendlyUrl = config.calendly_base_url || '';\n\nlet finalSubject = subjectText.replace(/{{name}}/g, clientName);\nlet finalBody = bodyText\n  .replace(/{{name}}/g, clientName)\n  .replace(/{{calendly_url}}/g, calendlyUrl)\n  .replace(/{{from_name}}/g, fromName);\n\nreturn [{\n  ...$item.json,\n  final_subject: finalSubject,\n  final_body: finalBody,\n  template_lang: template.template_lang || config.lang || 'ru',\n  template_source: template.template_source || 'db_template',\n  translation_error: template.translation_error || null,\n  template_ai_errors: template.ai_errors || [],\n}];"
      },
      "name": "2b. Compose Initial Reply",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2064,
        -80
      ],
      "id": "258bebe4-742f-4f1c-8e8c-9b30292e3f05"
    },
    {
      "parameters": {
        "amount": "={{ Math.floor(Math.random() * 5) + 1 }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2272,
        -80
      ],
      "id": "a47f27f4-2a7f-4566-a489-7d319ca80557",
      "name": "Wait",
      "webhookId": "3d07f095-a6fe-4ff0-abde-8851b17f892c"
    },
    {
      "parameters": {
        "sendTo": "={{ $('0. Ctx & Config').item.json.email }}",
        "subject": "={{ $('2b. Compose Initial Reply').item.json.final_subject }}",
        "message": "={{ $('2b. Compose Initial Reply').item.json.final_body }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2480,
        -80
      ],
      "id": "50462052-938f-4046-95a2-0b30b4d79465",
      "name": "Send a message",
      "webhookId": "00830c7f-f5de-49ce-b243-d5cc0c47b996",
      "credentials": {
        "gmailOAuth2": {
          "id": "dRP6U59xFUhSEpp0",
          "name": "Gmail account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO messages (\n  conversation_id,\n  direction,\n  medium,\n  body,\n  external_message_id,\n  meta\n)\nVALUES (\n  $1,\n  'outbound',\n  'email',\n  $2,\n  $3,\n  $4::jsonb\n);",
        "options": {
          "queryReplacement": "={{ [\n  $('0. Ctx & Config').item.json.conversation_id,\n  $('2b. Compose Initial Reply').item.json.final_body,\n  $('Send a message').item.json.id,\n  JSON.stringify({\n    subject: $('2b. Compose Initial Reply').item.json.final_subject,\n    kind: 'initial',\n    template_lang: $('2b. Compose Initial Reply').item.json.template_lang,\n    template_source: $('2b. Compose Initial Reply').item.json.template_source,\n    translation_error: $('2b. Compose Initial Reply').item.json.translation_error,\n    template_ai_errors: $('2b. Compose Initial Reply').item.json.template_ai_errors\n  })\n] }}"
        }
      },
      "name": "4b. Log Outbound Message",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2688,
        -80
      ],
      "id": "7dd54bc5-356e-4ac6-843c-3feb69829b7d",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO tasks (lead_id, type, due_at, notes)\nVALUES ($1, 'schedule_call', NOW() + interval '24 hours', $2);",
        "options": {
          "queryReplacement": "={{ [\n  $('0. Ctx & Config').item.json.lead_id,\n  'Check if ' + ($('0. Ctx & Config').item.json.full_name || 'the new lead') + ' has booked a call or replied.'\n] }}"
        }
      },
      "name": "4c. Create Task: Follow-up",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2896,
        -80
      ],
      "id": "66c0f1f9-05c6-47c0-8d90-d28722960339",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE leads\nSET stage = 'contacted', updated_at = NOW()\nWHERE id = $1;\n\nUPDATE conversations\nSET last_message_at = NOW()\nWHERE id = $2;",
        "options": {
          "queryReplacement": "={{ [\n  $('0. Ctx & Config').item.json.lead_id,\n  $('0. Ctx & Config').item.json.conversation_id\n] }}"
        }
      },
      "name": "4d. Update Lead & Conv. Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3120,
        -80
      ],
      "id": "eb86b2a9-0ea1-494a-9265-4aa03200aa5f",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "amount": 24,
        "unit": "hours"
      },
      "name": "5a. Wait 24h Before Follow-up",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3328,
        -80
      ],
      "id": "e4cda59d-9ffc-4600-bbcd-bc1496e33a4e"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  EXISTS (\n    SELECT 1 FROM bookings\n    WHERE lead_id = $1\n      AND status IN ('scheduled','rescheduled','attended')\n      AND scheduled_start >= NOW() - interval '30 days'\n  ) AS has_booking,\n  EXISTS (\n    SELECT 1 FROM messages\n    WHERE conversation_id = $2\n      AND direction = 'inbound'\n      AND message_ts >= NOW() - interval '7 days'\n  ) AS has_inbound_reply;",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, $('0. Ctx & Config').item.json.conversation_id ] }}"
        }
      },
      "name": "5b. Check Engagement (24h)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3536,
        -80
      ],
      "id": "18c61833-5059-41d5-be66-3460ddfc49d2",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ ($('5b. Check Engagement (24h)').item.json.has_booking || $('5b. Check Engagement (24h)').item.json.has_inbound_reply) ? 'true' : 'false' }}",
              "operation": "isEqual",
              "value2": "true"
            }
          ]
        }
      },
      "name": "5c. Need Follow-up #1?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        3744,
        -80
      ],
      "id": "a8b65e1f-36b6-45b6-98ec-82199a3018db"
    },
    {
      "parameters": {
        "jsCode": "\nconst ctx = $('0. Ctx & Config').item.json;\nconst lang = ['ru','en','pl'].includes(ctx.lang) ? ctx.lang : 'ru';\nconst name = ctx.full_name || 'there';\nconst calendly = ctx.calendly_base_url || 'https://calendly.com/arsenii-ovsianykov-idealogic';\nconst fromName = ctx.from_name || 'Team';\n\nconst templates = {\n  ru: {\n    subject: '\u041d\u0430\u043f\u043e\u043c\u043d\u044e \u043f\u0440\u043e \u0437\u0432\u043e\u043d\u043e\u043a',\n    body: `\u041f\u0440\u0438\u0432\u0435\u0442, {{name}}!\\n\\n\u0412\u0447\u0435\u0440\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u043b\u0438 \u043f\u0438\u0441\u044c\u043c\u043e \u0441 \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0438 \u0441\u0441\u044b\u043b\u043a\u043e\u0439 \u043d\u0430 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c. \u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0443\u0434\u043e\u0431\u043d\u043e \u0441\u043e\u0437\u0432\u043e\u043d\u0438\u0442\u044c\u0441\u044f \u2014 \u043c\u043e\u0436\u043d\u043e \u0441\u0440\u0430\u0437\u0443 \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0442: {{calendly_url}}.\\n\\n\u0415\u0441\u043b\u0438 \u043d\u0443\u0436\u0435\u043d \u0434\u0440\u0443\u0433\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0438\u043b\u0438 \u0432\u0440\u0435\u043c\u044f, \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u0432\u0435\u0442\u044c\u0442\u0435 \u043d\u0430 \u044d\u0442\u043e \u043f\u0438\u0441\u044c\u043c\u043e.\\n\\n\u0421\u043f\u0430\u0441\u0438\u0431\u043e!\\n{{from_name}}`\n  },\n  en: {\n    subject: 'Quick follow-up about our call',\n    body: `Hi {{name}},\\n\\nYesterday we sent over a few scoping questions and a Calendly link. Happy to jump on a call whenever it suits you: {{calendly_url}}.\\n\\nIf another format or time works better, just hit reply \u2014 we'll adjust.\\n\\nThanks!\\n{{from_name}}`\n  },\n  pl: {\n    subject: 'Przypomnienie o rozmowie',\n    body: `Cze\u015b\u0107 {{name}}!\\n\\nWczoraj wys\u0142ali\u015bmy kilka pyta\u0144 oraz link do kalendarza. Je\u015bli pasuje Ci rozmowa, zarezerwuj dogodny termin: {{calendly_url}}.\\n\\nGdyby lepsza by\u0142a inna forma kontaktu lub godzina, odpisz prosz\u0119 na t\u0119 wiadomo\u015b\u0107.\\n\\nDzi\u0119ki!\\n{{from_name}}`\n  }\n};\n\nconst tpl = templates[lang];\nfunction apply(str){\n  return str\n    .replace(/{{name}}/g, name)\n    .replace(/{{calendly_url}}/g, calendly)\n    .replace(/{{from_name}}/g, fromName);\n}\n\nreturn [{\n  followup_subject: apply(tpl.subject),\n  followup_body: apply(tpl.body),\n  followup_lang: lang\n}];\n"
      },
      "name": "5d. Compose Follow-up #1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3952,
        -176
      ],
      "id": "67f6b567-f2f7-4ec5-9433-d7ca55d1dde3"
    },
    {
      "parameters": {
        "amount": "={{ Math.floor(Math.random() * 6) + 3 }}",
        "unit": "minutes"
      },
      "name": "5e. Humanize Delay #1",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        4160,
        -176
      ],
      "id": "2e7bfc65-adf7-421a-81d9-931e50987cb5",
      "webhookId": "1c715e43-40ea-44cb-96ec-4a18d1042b1f"
    },
    {
      "parameters": {
        "sendTo": "={{ $('0. Ctx & Config').item.json.email }}",
        "subject": "={{ $('5d. Compose Follow-up #1').item.json.followup_subject }}",
        "message": "={{ $('5d. Compose Follow-up #1').item.json.followup_body }}",
        "options": {
          "appendAttribution": false
        }
      },
      "name": "5f. Send Follow-up #1",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        4368,
        -176
      ],
      "id": "72563577-bf31-4919-89d5-98164930bd1c",
      "webhookId": "87349fff-c7a9-4e0e-a611-7ee55d268bae",
      "credentials": {
        "gmailOAuth2": {
          "id": "dRP6U59xFUhSEpp0",
          "name": "Gmail account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO messages (conversation_id, direction, medium, body, external_message_id, meta)\nVALUES ($1, 'outbound', 'email', $2, $3, $4::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.conversation_id, $('5d. Compose Follow-up #1').item.json.followup_body, $('5f. Send Follow-up #1').item.json.id, JSON.stringify({ subject: $('5d. Compose Follow-up #1').item.json.followup_subject, kind: 'followup_1', template_lang: $('5d. Compose Follow-up #1').item.json.followup_lang }) ] }}"
        }
      },
      "name": "5g. Log Follow-up #1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4576,
        -176
      ],
      "id": "ae50667e-9026-4152-b151-03235da00a7f",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "amount": 48,
        "unit": "hours"
      },
      "name": "6a. Wait 48h Before Follow-up",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        4784,
        -176
      ],
      "id": "d5e8f347-fc2e-4e25-9a97-a47df2d1ef08"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  EXISTS (\n    SELECT 1 FROM bookings\n    WHERE lead_id = $1\n      AND status IN ('scheduled','rescheduled','attended')\n      AND scheduled_start >= NOW() - interval '30 days'\n  ) AS has_booking,\n  EXISTS (\n    SELECT 1 FROM messages\n    WHERE conversation_id = $2\n      AND direction = 'inbound'\n      AND message_ts >= NOW() - interval '7 days'\n  ) AS has_inbound_reply;",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, $('0. Ctx & Config').item.json.conversation_id ] }}"
        }
      },
      "name": "6b. Re-check Engagement (72h)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4992,
        -176
      ],
      "id": "4089af72-6d53-4c05-8263-613080371688",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ ($('6b. Re-check Engagement (72h)').item.json.has_booking || $('6b. Re-check Engagement (72h)').item.json.has_inbound_reply) ? 'true' : 'false' }}",
              "operation": "isEqual",
              "value2": "true"
            }
          ]
        }
      },
      "name": "6c. Need Follow-up #2?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        5200,
        -176
      ],
      "id": "099471bc-689d-4237-be51-a6b51857536c"
    },
    {
      "parameters": {
        "jsCode": "\nconst ctx = $('0. Ctx & Config').item.json;\nconst lang = ['ru','en','pl'].includes(ctx.lang) ? ctx.lang : 'ru';\nconst name = ctx.full_name || 'there';\nconst calendly = ctx.calendly_base_url || 'https://calendly.com/arsenii-ovsianykov-idealogic';\nconst fromName = ctx.from_name || 'Team';\n\nconst templates = {\n  ru: {\n    subject: '\u041e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u044f\u0432\u043a\u0443 \u0435\u0449\u0451 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e?',\n    body: `{{name}}, \u0434\u043e\u0431\u0440\u044b\u0439 \u0434\u0435\u043d\u044c!\\n\\n\u0425\u043e\u0442\u0438\u043c \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u043d\u0430\u0448\u0438 \u043f\u0440\u043e\u0448\u043b\u044b\u0435 \u043f\u0438\u0441\u044c\u043c\u0430. \u041c\u044b \u0433\u043e\u0442\u043e\u0432\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u0438 \u043e\u0431\u0441\u0443\u0434\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u2014 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u0442\u0443\u0442: {{calendly_url}}.\\n\\n\u0415\u0441\u043b\u0438 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b \u043f\u043e\u043c\u0435\u043d\u044f\u043b\u0438\u0441\u044c, \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043c\u044b \u043e\u0431\u043d\u043e\u0432\u0438\u043b\u0438 \u0441\u0442\u0430\u0442\u0443\u0441.\\n\\n\u0425\u043e\u0440\u043e\u0448\u0435\u0433\u043e \u0434\u043d\u044f!\\n{{from_name}}`\n  },\n  en: {\n    subject: 'Should we keep the slot on hold?',\n    body: `Hi {{name}},\\n\\nChecking in in case the previous emails got lost. We can jump on a quick call whenever you're ready \u2014 here is the calendar again: {{calendly_url}}.\\n\\nIf plans changed, just let us know and we'll update our pipeline.\\n\\nAll the best,\\n{{from_name}}`\n  },\n  pl: {\n    subject: 'Czy rozmowa jest wci\u0105\u017c aktualna?',\n    body: `Cze\u015b\u0107 {{name}}!\\n\\nSprawdzamy, czy nasze poprzednie wiadomo\u015bci dotar\u0142y. Ch\u0119tnie porozmawiamy \u2014 mo\u017cesz wybra\u0107 termin tutaj: {{calendly_url}}.\\n\\nJe\u015bli priorytety si\u0119 zmieni\u0142y, daj nam zna\u0107, zaktualizujemy status.\\n\\nPozdrawiam,\\n{{from_name}}`\n  }\n};\n\nconst tpl = templates[lang];\nfunction apply(str){\n  return str\n    .replace(/{{name}}/g, name)\n    .replace(/{{calendly_url}}/g, calendly)\n    .replace(/{{from_name}}/g, fromName);\n}\n\nreturn [{\n  followup_subject: apply(tpl.subject),\n  followup_body: apply(tpl.body),\n  followup_lang: lang\n}];\n"
      },
      "name": "6d. Compose Follow-up #2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5408,
        -272
      ],
      "id": "7b5c1c18-2c78-4f32-854a-e9829dda2425"
    },
    {
      "parameters": {
        "amount": "={{ Math.floor(Math.random() * 6) + 3 }}",
        "unit": "minutes"
      },
      "name": "6e. Humanize Delay #2",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        5616,
        -272
      ],
      "id": "740a8ed8-b16a-4239-a983-c4649ce5f0a8",
      "webhookId": "9a90cdb8-4818-4128-a556-89967a0703f8"
    },
    {
      "parameters": {
        "sendTo": "={{ $('0. Ctx & Config').item.json.email }}",
        "subject": "={{ $('6d. Compose Follow-up #2').item.json.followup_subject }}",
        "message": "={{ $('6d. Compose Follow-up #2').item.json.followup_body }}",
        "options": {
          "appendAttribution": false
        }
      },
      "name": "6f. Send Follow-up #2",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        5824,
        -272
      ],
      "id": "faa0883b-52bb-42a2-ae04-8d2ddf1ec05a",
      "webhookId": "7cefe047-3f70-4a9b-8f2d-a2d9cbcc5a29",
      "credentials": {
        "gmailOAuth2": {
          "id": "dRP6U59xFUhSEpp0",
          "name": "Gmail account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO messages (conversation_id, direction, medium, body, external_message_id, meta)\nVALUES ($1, 'outbound', 'email', $2, $3, $4::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.conversation_id, $('6d. Compose Follow-up #2').item.json.followup_body, $('6f. Send Follow-up #2').item.json.id, JSON.stringify({ subject: $('6d. Compose Follow-up #2').item.json.followup_subject, kind: 'followup_2', template_lang: $('6d. Compose Follow-up #2').item.json.followup_lang }) ] }}"
        }
      },
      "name": "6g. Log Follow-up #2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        6032,
        -272
      ],
      "id": "485dc032-b5fe-4224-830d-8cdfc437cca9",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "id": "1b98167f-fba5-4372-8437-4a938a5d602d",
      "name": "4a. Initial Email Sent?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2688,
        -160
      ],
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.error }}",
              "operation": "isEmpty"
            }
          ]
        }
      }
    },
    {
      "id": "9c609419-e190-429e-80c8-5f3cb17f193c",
      "name": "4a. Log Initial Email Error",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2928,
        -48
      ],
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_initial_email_failed', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, error: $json.error, template_lang: $('2b. Compose Initial Reply').item.json.template_lang, template_source: $('2b. Compose Initial Reply').item.json.template_source }) ] }}"
        }
      },
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "id": "7ef0de90-857f-44d3-986b-dc1a7cfb2831",
      "name": "4a. Alert Initial Email Error",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3152,
        -48
      ],
      "parameters": {
        "chatId": "-1003017940130",
        "text": "\u274c Initial auto-reply failed for {{ $('0. Ctx & Config').item.json.email }}: {{ $json.error?.message || $json.error || 'Unknown error' }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "credentials": {
        "telegramApi": {
          "id": "DIjzBhPLelPnkz7y",
          "name": "Telegram account"
        }
      }
    },
    {
      "id": "9bae45d7-774d-4259-afbe-d38255fd6a81",
      "name": "4a. Stop Execution (Initial Email)",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        3376,
        -48
      ],
      "parameters": {
        "errorMessage": "Initial auto-reply failed"
      }
    },
    {
      "id": "fb8efd31-a5d5-4286-b9bd-6f0a9681e129",
      "name": "4b. Pipeline Event: Initial Email",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2896,
        -128
      ],
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_initial_email_sent', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, message_id: $('Send a message').item.json.id, template_lang: $('2b. Compose Initial Reply').item.json.template_lang, template_source: $('2b. Compose Initial Reply').item.json.template_source, translation_error: $('2b. Compose Initial Reply').item.json.translation_error, template_ai_errors: $('2b. Compose Initial Reply').item.json.template_ai_errors }) ] }}"
        }
      },
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "id": "6d0c918c-b4c9-4c0d-9728-591c0d9908f6",
      "name": "4e. Pipeline Event: Lead Contacted",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3328,
        -96
      ],
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'lead_stage_contacted', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id }) ] }}"
        }
      },
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "id": "136a4209-e0dc-4410-adf7-b9ca7d8521ad",
      "name": "5f. Follow-up #1 Sent?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        4576,
        -256
      ],
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.error }}",
              "operation": "isEmpty"
            }
          ]
        }
      }
    },
    {
      "id": "08f16100-cdaf-4000-ba6f-2168d67ba8c7",
      "name": "5f. Log Follow-up #1 Error",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4816,
        -176
      ],
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_followup1_failed', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, error: $json.error }) ] }}"
        }
      },
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "id": "cd687049-0799-4a5b-a5ce-0d74fb40d31e",
      "name": "5f. Alert Follow-up #1 Error",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        5040,
        -176
      ],
      "parameters": {
        "chatId": "-1003017940130",
        "text": "\u274c Follow-up #1 failed for {{ $('0. Ctx & Config').item.json.email }}: {{ $json.error?.message || $json.error || 'Unknown error' }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "credentials": {
        "telegramApi": {
          "id": "DIjzBhPLelPnkz7y",
          "name": "Telegram account"
        }
      }
    },
    {
      "id": "c0477cec-69c2-4eb0-85c1-dc77a6b870ff",
      "name": "5f. Stop Execution (FU1)",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        5264,
        -176
      ],
      "parameters": {
        "errorMessage": "Follow-up #1 email failed"
      }
    },
    {
      "id": "4d5fda12-ca1e-499b-9810-047f80be7cfa",
      "name": "5g. Pipeline Event: Follow-up #1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4816,
        -288
      ],
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_followup1_sent', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, message_id: $('5f. Send Follow-up #1').item.json.id, template_lang: $('5d. Compose Follow-up #1').item.json.followup_lang }) ] }}"
        }
      },
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "id": "46b316c4-443c-40c3-bf77-f4dc0fd0c61c",
      "name": "5c. Pipeline Event: Skip FU#1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4128,
        -32
      ],
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_followup1_skipped', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, reason: 'engaged_within_24h' }) ] }}"
        }
      },
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "id": "9d1228ba-cb0c-4aa0-a26c-524118e27f44",
      "name": "6f. Follow-up #2 Sent?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        5872,
        -256
      ],
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.error }}",
              "operation": "isEmpty"
            }
          ]
        }
      }
    },
    {
      "id": "e426053d-fdfa-4943-a7a6-bc63a2732621",
      "name": "6f. Log Follow-up #2 Error",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        6112,
        -176
      ],
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_followup2_failed', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, error: $json.error }) ] }}"
        }
      },
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "id": "24531a5a-5194-40ab-a8bc-951c431e7ee2",
      "name": "6f. Alert Follow-up #2 Error",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        6336,
        -176
      ],
      "parameters": {
        "chatId": "-1003017940130",
        "text": "\u274c Follow-up #2 failed for {{ $('0. Ctx & Config').item.json.email }}: {{ $json.error?.message || $json.error || 'Unknown error' }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "credentials": {
        "telegramApi": {
          "id": "DIjzBhPLelPnkz7y",
          "name": "Telegram account"
        }
      }
    },
    {
      "id": "d55253a5-1f71-424a-a120-b6d997c3bbff",
      "name": "6f. Stop Execution (FU2)",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        6560,
        -176
      ],
      "parameters": {
        "errorMessage": "Follow-up #2 email failed"
      }
    },
    {
      "id": "58b5a0b6-6509-4ff0-a7c2-5a42dbec7afd",
      "name": "6g. Pipeline Event: Follow-up #2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        6112,
        -288
      ],
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_followup2_sent', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, message_id: $('6f. Send Follow-up #2').item.json.id, template_lang: $('6d. Compose Follow-up #2').item.json.followup_lang }) ] }}"
        }
      },
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "id": "405790d2-9f19-4395-8b44-eb03273ef019",
      "name": "6c. Pipeline Event: Skip FU#2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        5408,
        -32
      ],
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('lead', $1, 'dev_request_followup2_skipped', $2::jsonb);",
        "options": {
          "queryReplacement": "={{ [ $('0. Ctx & Config').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Ctx & Config').item.json.conversation_id, reason: 'engaged_within_72h' }) ] }}"
        }
      },
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    }
  ],
  "connections": {
    "[START] dev_request processor": {
      "main": [
        [
          {
            "node": "0. Ctx & Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "0. Ctx & Config": {
      "main": [
        [
          {
            "node": "1a. Load Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1a. Load Template": {
      "main": [
        [
          {
            "node": "1b. IF: Template Found?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1b. IF: Template Found?": {
      "main": [
        [
          {
            "node": "1f. Shape 'True' Path Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "1c-fallback. Load EN Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1c-fallback. Load EN Template": {
      "main": [
        [
          {
            "node": "1d-prep. Prepare AI Prompt Vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1d-prep. Prepare AI Prompt Vars": {
      "main": [
        [
          {
            "node": "1d-translate. AI Translate Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1e. Parse AI JSON": {
      "main": [
        [
          {
            "node": "2. Merge Template Branches",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "1d-translate. AI Translate Template": {
      "main": [
        [
          {
            "node": "1e. Parse AI JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1f. Shape 'True' Path Data": {
      "main": [
        [
          {
            "node": "2. Merge Template Branches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. Merge Template Branches": {
      "main": [
        [
          {
            "node": "2b. Compose Initial Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2b. Compose Initial Reply": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "4a. Initial Email Sent?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4b. Log Outbound Message": {
      "main": [
        [
          {
            "node": "4b. Pipeline Event: Initial Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4c. Create Task: Follow-up": {
      "main": [
        [
          {
            "node": "4d. Update Lead & Conv. Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4d. Update Lead & Conv. Status": {
      "main": [
        [
          {
            "node": "4e. Pipeline Event: Lead Contacted",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5a. Wait 24h Before Follow-up": {
      "main": [
        [
          {
            "node": "5b. Check Engagement (24h)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5b. Check Engagement (24h)": {
      "main": [
        [
          {
            "node": "5c. Need Follow-up #1?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5c. Need Follow-up #1?": {
      "main": [
        [
          {
            "node": "5d. Compose Follow-up #1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "5c. Pipeline Event: Skip FU#1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5d. Compose Follow-up #1": {
      "main": [
        [
          {
            "node": "5e. Humanize Delay #1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5e. Humanize Delay #1": {
      "main": [
        [
          {
            "node": "5f. Send Follow-up #1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5f. Send Follow-up #1": {
      "main": [
        [
          {
            "node": "5f. Follow-up #1 Sent?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5g. Log Follow-up #1": {
      "main": [
        [
          {
            "node": "5g. Pipeline Event: Follow-up #1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6a. Wait 48h Before Follow-up": {
      "main": [
        [
          {
            "node": "6b. Re-check Engagement (72h)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6b. Re-check Engagement (72h)": {
      "main": [
        [
          {
            "node": "6c. Need Follow-up #2?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6c. Need Follow-up #2?": {
      "main": [
        [
          {
            "node": "6d. Compose Follow-up #2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "6c. Pipeline Event: Skip FU#2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6d. Compose Follow-up #2": {
      "main": [
        [
          {
            "node": "6e. Humanize Delay #2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6e. Humanize Delay #2": {
      "main": [
        [
          {
            "node": "6f. Send Follow-up #2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6f. Send Follow-up #2": {
      "main": [
        [
          {
            "node": "6f. Follow-up #2 Sent?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4a. Initial Email Sent?": {
      "main": [
        [
          {
            "node": "4b. Log Outbound Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "4a. Log Initial Email Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4a. Log Initial Email Error": {
      "main": [
        [
          {
            "node": "4a. Alert Initial Email Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4a. Alert Initial Email Error": {
      "main": [
        [
          {
            "node": "4a. Stop Execution (Initial Email)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4a. Stop Execution (Initial Email)": {
      "main": []
    },
    "4b. Pipeline Event: Initial Email": {
      "main": [
        [
          {
            "node": "4c. Create Task: Follow-up",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4e. Pipeline Event: Lead Contacted": {
      "main": [
        [
          {
            "node": "5a. Wait 24h Before Follow-up",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5c. Pipeline Event: Skip FU#1": {
      "main": [
        [
          {
            "node": "6a. Wait 48h Before Follow-up",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5f. Follow-up #1 Sent?": {
      "main": [
        [
          {
            "node": "5g. Log Follow-up #1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "5f. Log Follow-up #1 Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5f. Log Follow-up #1 Error": {
      "main": [
        [
          {
            "node": "5f. Alert Follow-up #1 Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5f. Alert Follow-up #1 Error": {
      "main": [
        [
          {
            "node": "5f. Stop Execution (FU1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5f. Stop Execution (FU1)": {
      "main": []
    },
    "5g. Pipeline Event: Follow-up #1": {
      "main": [
        [
          {
            "node": "6a. Wait 48h Before Follow-up",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6c. Pipeline Event: Skip FU#2": {
      "main": []
    },
    "6f. Follow-up #2 Sent?": {
      "main": [
        [
          {
            "node": "6g. Log Follow-up #2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "6f. Log Follow-up #2 Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6f. Log Follow-up #2 Error": {
      "main": [
        [
          {
            "node": "6f. Alert Follow-up #2 Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6f. Alert Follow-up #2 Error": {
      "main": [
        [
          {
            "node": "6f. Stop Execution (FU2)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6f. Stop Execution (FU2)": {
      "main": []
    },
    "6g. Log Follow-up #2": {
      "main": [
        [
          {
            "node": "6g. Pipeline Event: Follow-up #2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6g. Pipeline Event: Follow-up #2": {
      "main": []
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "69871f35b6454f2fa99c2f68403092fbaef8d3b776d3b26f1ec8ca290a75b807"
  }
}
