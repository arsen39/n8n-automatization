{
  "nodes": [
    {
      "parameters": {},
      "name": "[START] hr.proc.vacancy",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -9600,
        0
      ],
      "id": "d318dece-8cbc-46f4-8a3e-1cecd9d6fa61"
    },
    {
      "parameters": {
        "jsCode": "const input = $json || {};\n\nif (!input.lead_id) {\n  throw new Error('lead_id is required');\n}\nif (!input.contact_id) {\n  throw new Error('contact_id is required');\n}\n\nfunction toNumber(value) {\n  if (value === null || value === undefined) return null;\n  const num = typeof value === 'number' ? value : parseFloat(String(value).replace(',', '.'));\n  return Number.isFinite(num) ? Number(num) : null;\n}\n\nfunction titleCase(value) {\n  if (!value) return null;\n  return value\n    .toString()\n    .split(/\\s|_|-/)\n    .map((part) => part ? part.charAt(0).toUpperCase() + part.slice(1).toLowerCase() : '')\n    .filter(Boolean)\n    .join(' ');\n}\n\nfunction normUrl(u) {\n  if (!u) return null;\n  try {\n    const candidate = u.startsWith('http://') || u.startsWith('https://') ? u : `https://${u}`;\n    return new URL(candidate).toString();\n  } catch (error) {\n    return null;\n  }\n}\n\nconst rawProfile = input.candidate_profile || {};\nconst rawSkills = Array.isArray(rawProfile.skills) ? rawProfile.skills : [];\nconst skills = rawSkills\n  .map((skill) => typeof skill === 'string' ? skill.trim() : null)\n  .filter(Boolean)\n  .map((skill) => titleCase(skill));\nconst experienceYears = toNumber(rawProfile.experience_years);\nlet rateCurrency = typeof rawProfile.rate_currency === 'string'\n  ? rawProfile.rate_currency.trim().toUpperCase()\n  : null;\nconst allowedCurrencies = new Set(['USD', 'EUR', 'PLN']);\nif (!rateCurrency || !allowedCurrencies.has(rateCurrency)) {\n  rateCurrency = null;\n}\nconst allowedPeriods = new Set(['hourly', 'daily', 'monthly']);\nconst ratePeriod = typeof rawProfile.rate_period === 'string' && allowedPeriods.has(rawProfile.rate_period)\n  ? rawProfile.rate_period\n  : 'hourly';\nconst allowedAvailability = new Set(['available_now', 'part_time', 'notice_period', 'unavailable']);\nlet availability = typeof rawProfile.availability === 'string'\n  ? rawProfile.availability\n  : null;\nif (!availability || !allowedAvailability.has(availability)) {\n  availability = 'notice_period';\n}\n\nconst candidateProfile = {\n  cv_url: normUrl(rawProfile.cv_url || null),\n  skills,\n  experience_years: experienceYears,\n  location: rawProfile.location ? rawProfile.location.toString().trim() : null,\n  rate_currency: rateCurrency,\n  rate_min: toNumber(rawProfile.rate_min),\n  rate_max: toNumber(rawProfile.rate_max),\n  rate_period: ratePeriod,\n  availability,\n};\n\nconst seniority = experienceYears !== null\n  ? (experienceYears >= 5 ? 'Senior' : experienceYears >= 2 ? 'Middle' : 'Junior')\n  : 'Middle';\nconst defaultStatus = availability === 'available_now' ? 'active' : 'prospect';\n\nconst poolTargetsRaw = Array.isArray(input.candidate_pool_targets) ? input.candidate_pool_targets : [];\nconst poolTargets = poolTargetsRaw\n  .map((target) => {\n    if (!target) return null;\n    const name = typeof target.name === 'string' ? target.name.trim() : null;\n    if (!name) return null;\n    const status = typeof target.status === 'string' && ['active','prospect'].includes(target.status)\n      ? target.status\n      : defaultStatus;\n    return { name, status };\n  })\n  .filter(Boolean);\n\nif (!poolTargets.length) {\n  poolTargets.push({\n    name: `${seniority} Talent Pool`,\n    status: defaultStatus,\n  });\n}\n\nconst lang = (input.preferred_lang || '').toLowerCase();\nconst supportedLangs = new Set(['ru', 'en', 'pl']);\nconst preferredLang = supportedLangs.has(lang) ? lang : 'ru';\n\nconst ndaExternalId = input.nda_external_id || `nda-${input.lead_id}`;\nconst ndaUrl = input.nda_url || `https://chain.do/doc/${ndaExternalId}`;\n\nreturn [{\n  lead_id: input.lead_id,\n  contact_id: input.contact_id,\n  conversation_id: input.conversation_id || null,\n  message_id: input.message_id || null,\n  email: input.email,\n  full_name: input.full_name || 'Candidate',\n  preferred_lang: preferredLang,\n  timezone: input.timezone || 'Europe/Warsaw',\n  source_code: input.source_code || null,\n  form_code: input.form_code || null,\n  submission_id: input.submission_id || null,\n  candidate_profile: candidateProfile,\n  pool_targets: poolTargets,\n  nda_external_id: ndaExternalId,\n  nda_url: ndaUrl,\n  human_delay_minutes: Math.floor(Math.random() * 6) + 4,\n  followup1_delay_days: 5,\n  followup2_delay_days: 7,\n  final_delay_days: 7\n}];"
      },
      "name": "0. Prepare Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -9360,
        0
      ],
      "id": "558cb4fd-76fc-4b89-8c0e-17cd7776d3b5"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE leads\\nSET stage = CASE\\n      WHEN stage IN ('in_pool','won','lost') THEN stage\\n      ELSE 'nurturing'\\n    END,\\n    updated_at = NOW()\\nWHERE id = $1\\nRETURNING stage;",
        "options": {
          "queryReplacement": "={{ [ $('0. Prepare Context').item.json.lead_id ] }}"
        }
      },
      "name": "0b. Ensure Stage=Nurturing",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -9120,
        0
      ],
      "id": "823fce39-c00d-4df1-8c6c-87d189b9bfca",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH upsert AS (\\n  INSERT INTO candidate_profiles (\\n    contact_id, cv_url, skills, experience_years, location,\\n    rate_currency, rate_min, rate_max, rate_period, availability\\n  )\\n  VALUES (\\n    $1, $2, $3::jsonb, $4, $5, $6, $7, $8, $9::rate_period, $10::availability\\n  )\\n  ON CONFLICT (contact_id) DO UPDATE SET\\n    cv_url = EXCLUDED.cv_url,\\n    skills = EXCLUDED.skills,\\n    experience_years = EXCLUDED.experience_years,\\n    location = EXCLUDED.location,\\n    rate_currency = EXCLUDED.rate_currency,\\n    rate_min = EXCLUDED.rate_min,\\n    rate_max = EXCLUDED.rate_max,\\n    rate_period = EXCLUDED.rate_period,\\n    availability = EXCLUDED.availability,\\n    updated_at = NOW()\\n  RETURNING id\\n)\\nSELECT id AS candidate_profile_id FROM upsert\\nUNION ALL\\nSELECT id FROM candidate_profiles WHERE contact_id = $1\\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ [ $('0. Prepare Context').item.json.contact_id, $('0. Prepare Context').item.json.candidate_profile.cv_url, JSON.stringify($('0. Prepare Context').item.json.candidate_profile.skills || []), $('0. Prepare Context').item.json.candidate_profile.experience_years, $('0. Prepare Context').item.json.candidate_profile.location, $('0. Prepare Context').item.json.candidate_profile.rate_currency, $('0. Prepare Context').item.json.candidate_profile.rate_min, $('0. Prepare Context').item.json.candidate_profile.rate_max, $('0. Prepare Context').item.json.candidate_profile.rate_period, $('0. Prepare Context').item.json.candidate_profile.availability ] }}"
        }
      },
      "name": "1. Upsert Candidate Profile",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -8880,
        0
      ],
      "id": "8e626f7d-e10e-47ce-b414-bb6818698fc9",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH payload AS (\\n  SELECT $1::uuid AS candidate_profile_id, jsonb_array_elements($2::jsonb) AS pool\\n),\\nins AS (\\n  INSERT INTO pools (name, description)\\n  SELECT DISTINCT pool->>'name', 'Auto-created from hr.proc.vacancy'\\n  FROM payload\\n  WHERE COALESCE(pool->>'name','') <> ''\\n  ON CONFLICT (name) DO UPDATE SET updated_at = NOW()\\n  RETURNING id, name\\n),\\nall_pools AS (\\n  SELECT id, name FROM ins\\n  UNION\\n  SELECT id, name FROM pools\\n  WHERE name IN (SELECT pool->>'name' FROM payload WHERE COALESCE(pool->>'name','') <> '')\\n),\\nmembership AS (\\n  INSERT INTO candidate_pool_members (pool_id, candidate_profile_id, status)\\n  SELECT ap.id, payload.candidate_profile_id, COALESCE(NULLIF(pool->>'status',''), 'prospect')\\n  FROM payload\\n  JOIN all_pools ap ON ap.name = pool->>'name'\\n  ON CONFLICT (pool_id, candidate_profile_id) DO UPDATE\\n    SET status = EXCLUDED.status\\n  RETURNING pool_id\\n)\\nSELECT COUNT(*) AS pools_linked FROM membership;",
        "options": {
          "queryReplacement": "={{ [ $('1. Upsert Candidate Profile').item.json.candidate_profile_id, JSON.stringify($('0. Prepare Context').item.json.pool_targets || []) ] }}"
        }
      },
      "name": "1a. Sync Pools",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -8640,
        0
      ],
      "id": "fe09ada4-325f-407e-ba6f-bbb1f9661021",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\\nVALUES ('candidate', $1, 'profile_upserted', $2::jsonb)\\nRETURNING id;",
        "options": {
          "queryReplacement": "={{ [ $('1. Upsert Candidate Profile').item.json.candidate_profile_id, JSON.stringify({ contact_id: $('0. Prepare Context').item.json.contact_id, source_code: $('0. Prepare Context').item.json.source_code, skills: $('0. Prepare Context').item.json.candidate_profile.skills || [] }) ] }}"
        }
      },
      "name": "1b. Log Candidate Profile",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -8400,
        0
      ],
      "id": "e03607f9-e81f-453c-92ac-4faa94a41050",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO tasks (lead_id, type, due_at, notes)\\nSELECT $1, 'review_estimate', NOW() + interval '2 days', $2\\nWHERE NOT EXISTS (\\n  SELECT 1 FROM tasks WHERE lead_id = $1 AND type = 'review_estimate' AND status = 'open'\\n);\\n\\nINSERT INTO tasks (lead_id, type, due_at, notes)\\nSELECT $1, 'add_to_pool', NOW() + interval '7 days', $3\\nWHERE NOT EXISTS (\\n  SELECT 1 FROM tasks WHERE lead_id = $1 AND type = 'add_to_pool' AND status = 'open'\\n)\\nRETURNING id;",
        "options": {
          "queryReplacement": "={{ [ $('0. Prepare Context').item.json.lead_id, 'Проверить NDA и профиль кандидата', 'Подготовить кандидата к включению в пул' ] }}"
        }
      },
      "name": "1c. Ensure Tasks",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -8160,
        0
      ],
      "id": "20072aab-7d8d-4043-a99e-859f53ea1a30",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "K7opSdocSendNDA",
          "mode": "list",
          "cachedResultName": "Send NDA via Chaindoc"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "name": "2. Trigger NDA",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -7920,
        0
      ],
      "id": "31cca65d-647b-4a54-99f5-a2a7ea70ad8a",
      "continueOnFail": true
    },
    {
      "parameters": {
        "amount": "={{ $('0. Prepare Context').item.json.human_delay_minutes }}",
        "unit": "minutes"
      },
      "name": "2a. Wait Humanizer",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -7680,
        0
      ],
      "id": "0dd45be9-eec1-4838-8769-4259afe32b1d",
      "webhookId": "b4df9f00-6037-47bb-ab7b-5f32e24c5f8d"
    },
    {
      "parameters": {
        "jsCode": "const ctx = $('0. Prepare Context').item.json;\nconst profile = ctx.candidate_profile || {};\nconst firstName = (ctx.full_name || '').split(' ')[0] || 'Коллега';\nconst lang = ctx.preferred_lang || 'ru';\nconst availability = profile.availability || 'notice_period';\nconst skills = (profile.skills || []).slice(0, 3).join(', ');\nconst rate = profile.rate_min && profile.rate_currency ? `${profile.rate_min} ${profile.rate_currency}` : null;\nconst ndaUrl = ctx.nda_url;\n\nlet subject;\nlet body;\n\nif (lang === 'ru') {\n  subject = 'NDA и следующий шаг по сотрудничеству';\n  const lines = [];\n  lines.push(`Привет, ${firstName}!`);\n  lines.push('Спасибо за отклик — мы как раз собираем пул специалистов под проекты клиентов.');\n  lines.push(`Чтобы поделиться деталями, пришлю NDA: ${ndaUrl}`);\n  lines.push('После подписи можем обсудить твой опыт и ближайшие задачи.');\n  const extra = [];\n  if (skills) extra.push(`Стек: ${skills}`);\n  if (rate) extra.push(`Ориентир по ставке: ${rate}`);\n  if (availability === 'available_now') {\n    extra.push('Доступность: готов подключиться сразу');\n  }\n  if (extra.length) {\n    lines.push(extra.join('\n'));\n  }\n  lines.push('Если пул идеален — подтвердим формат и добавим тебя в базу, чтобы не терять время на старте проекта.');\n  lines.push('Напиши, пожалуйста, удобно ли подписать NDA на этой неделе и какой формат общения предпочитаешь.');\n  body = lines.join('\n\n');\n} else {\n  subject = 'Next step & NDA for our talent pool';\n  const lines = [];\n  lines.push(`Hi ${firstName},`);\n  lines.push('Thanks for reaching out! We are building a vetted pool for upcoming client projects.');\n  lines.push(`Here is the NDA so we can share details: ${ndaUrl}`);\n  lines.push('Once it is signed we can jump on a short intro call and review current openings.');\n  const extra = [];\n  if (skills) extra.push(`Stack: ${skills}`);\n  if (rate) extra.push(`Rate expectation: ${rate}`);\n  if (availability === 'available_now') {\n    extra.push('Availability: ready to join immediately');\n  }\n  if (extra.length) {\n    lines.push(extra.join('\n'));\n  }\n  lines.push('Let me know if the NDA works for you and how you prefer to stay in touch.');\n  body = lines.join('\n\n');\n}\n\nreturn [{\n  subject,\n  body,\n  template_lang: lang\n}];"
      },
      "name": "3. Compose Initial Email",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -7440,
        0
      ],
      "id": "d8a17056-ed5f-4ae8-b0e7-11ca3c73955a"
    },
    {
      "parameters": {
        "sendTo": "={{ $('0. Prepare Context').item.json.email }}",
        "subject": "={{ $('3. Compose Initial Email').item.json.subject }}",
        "message": "={{ $('3. Compose Initial Email').item.json.body }}",
        "options": {
          "appendAttribution": false
        }
      },
      "name": "3a. Send Initial Email",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -7200,
        0
      ],
      "id": "266601fc-2e69-4875-a27f-4b47ccb0ef70",
      "credentials": {
        "gmailOAuth2": {
          "id": "dRP6U59xFUhSEpp0",
          "name": "Gmail account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO messages (\\n  conversation_id, direction, medium, sender_contact_id, body, body_html, message_ts, external_message_id, meta\\n)\\nVALUES (\\n  $1, 'outbound', 'email', $2, $3, NULL, NOW(), $4, $5::jsonb\\n)\\nRETURNING id AS message_id;",
        "options": {
          "queryReplacement": "={{ [ $('0. Prepare Context').item.json.conversation_id, $('0. Prepare Context').item.json.contact_id, $('3. Compose Initial Email').item.json.body, $('3a. Send Initial Email').item.json.id, JSON.stringify({ subject: $('3. Compose Initial Email').item.json.subject, kind: 'hr_initial', template_lang: $('3. Compose Initial Email').item.json.template_lang }) ] }}"
        }
      },
      "name": "3b. Log Initial Message",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -6960,
        0
      ],
      "id": "7eac05a4-e5ac-4cf0-841e-e6d6933edcbb",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE leads SET stage = 'nurturing', updated_at = NOW() WHERE id = $1 AND stage NOT IN ('in_pool','won','lost');\\nUPDATE conversations SET last_message_at = NOW() WHERE id = $2 RETURNING id;",
        "options": {
          "queryReplacement": "={{ [ $('0. Prepare Context').item.json.lead_id, $('0. Prepare Context').item.json.conversation_id ] }}"
        }
      },
      "name": "3c. Update Lead & Conversation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -6720,
        0
      ],
      "id": "463bca66-1b30-46c6-ae35-997d7e7621d8",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\\nVALUES ('lead', $1, 'vacancy_initial_email_sent', $2::jsonb)\\nRETURNING id;",
        "options": {
          "queryReplacement": "={{ [ $('0. Prepare Context').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Prepare Context').item.json.conversation_id, email: $('0. Prepare Context').item.json.email, template_lang: $('3. Compose Initial Email').item.json.template_lang }) ] }}"
        }
      },
      "name": "3d. Log Initial Event",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -6480,
        0
      ],
      "id": "2d358b9c-b09d-4058-8cd1-f706c669f8e5",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH payload AS (\n  SELECT\n    $1::uuid AS lead_id,\n    $2::jsonb AS data\n)\nINSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nSELECT 'lead', lead_id, 'vacancy_followup_scheduled', data\nFROM payload\nRETURNING id;",
        "options": {
          "queryReplacement": "={{ [ $('0. Prepare Context').item.json.lead_id, JSON.stringify({ conversation_id: $('0. Prepare Context').item.json.conversation_id, contact_id: $('0. Prepare Context').item.json.contact_id, candidate_profile_id: $('1. Upsert Candidate Profile').item.json.candidate_profile_id, email: $('0. Prepare Context').item.json.email, full_name: $('0. Prepare Context').item.json.full_name, preferred_lang: $('0. Prepare Context').item.json.preferred_lang, nda_external_id: $('0. Prepare Context').item.json.nda_external_id, nda_url: $('0. Prepare Context').item.json.nda_url, followup1_delay_days: $('0. Prepare Context').item.json.followup1_delay_days, followup2_delay_days: $('0. Prepare Context').item.json.followup2_delay_days, final_delay_days: $('0. Prepare Context').item.json.final_delay_days, scheduled_by: 'hr.proc.vacancy' }) ] }}"
        }
      },
      "name": "4. Schedule Follow-ups",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -6000,
        0
      ],
      "id": "0afce628-8dab-4953-924a-c69501da9f1c",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "status",
              "value": "scheduled"
            },
            {
              "name": "lead_id",
              "value": "={{ $('0. Prepare Context').item.json.lead_id }}"
            },
            {
              "name": "candidate_profile_id",
              "value": "={{ $('1. Upsert Candidate Profile').item.json.candidate_profile_id }}"
            },
            {
              "name": "followups_strategy",
              "value": "sequencer"
            }
          ],
          "boolean": [
            {
              "name": "followups_scheduled",
              "value": true
            }
          ]
        }
      },
      "name": "5. Result (Scheduled)",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        -5760,
        0
      ],
      "id": "81e89345-09a0-46d9-b9d0-f63ff0aa11db"
    }
  ],
  "connections": {
    "[START] hr.proc.vacancy": {
      "main": [
        [
          {
            "node": "0. Prepare Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "0. Prepare Context": {
      "main": [
        [
          {
            "node": "0b. Ensure Stage=Nurturing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "0b. Ensure Stage=Nurturing": {
      "main": [
        [
          {
            "node": "1. Upsert Candidate Profile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1. Upsert Candidate Profile": {
      "main": [
        [
          {
            "node": "1a. Sync Pools",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1a. Sync Pools": {
      "main": [
        [
          {
            "node": "1b. Log Candidate Profile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1b. Log Candidate Profile": {
      "main": [
        [
          {
            "node": "1c. Ensure Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1c. Ensure Tasks": {
      "main": [
        [
          {
            "node": "2. Trigger NDA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. Trigger NDA": {
      "main": [
        [
          {
            "node": "2a. Wait Humanizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2a. Wait Humanizer": {
      "main": [
        [
          {
            "node": "3. Compose Initial Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3. Compose Initial Email": {
      "main": [
        [
          {
            "node": "3a. Send Initial Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3a. Send Initial Email": {
      "main": [
        [
          {
            "node": "3b. Log Initial Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3b. Log Initial Message": {
      "main": [
        [
          {
            "node": "3c. Update Lead & Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3c. Update Lead & Conversation": {
      "main": [
        [
          {
            "node": "3d. Log Initial Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3d. Log Initial Event": {
      "main": [
        [
          {
            "node": "4. Schedule Follow-ups",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4. Schedule Follow-ups": {
      "main": [
        [
          {
            "node": "5. Result (Scheduled)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4f28e31f-3eb1-47ab-afb7-dbfa02466987"
  }
}
