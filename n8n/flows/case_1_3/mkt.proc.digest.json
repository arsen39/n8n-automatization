{
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [1],
              "triggerAtHour": 9
            }
          ]
        }
      },
      "name": "[START] Weekly Digest",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [-3056, -112],
      "id": "b120c2b8-8f95-40d2-8a65-9c54bd1e45d5"
    },
    {
      "parameters": {
        "url": "={{ $env.DIGEST_FEED_URL || 'https://example.com/api/digest' }}",
        "options": {
          "timeout": 60
        }
      },
      "name": "1. Fetch Digest Feed",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [-2784, -112],
      "id": "dd69a899-37e9-4069-8d3a-7ef08c938c14"
    },
    {
      "parameters": {
        "functionCode": "const payload = items[0]?.json ?? {};\nconst rawItems = Array.isArray(payload.items) ? payload.items : (Array.isArray(payload) ? payload : []);\nconst lookbackDays = Number($env.DIGEST_LOOKBACK_DAYS ?? 5);\nconst maxItems = Number($env.DIGEST_MAX_ITEMS ?? 7);\nconst threshold = new Date(Date.now() - lookbackDays * 86400000);\n\nconst normalized = rawItems\n  .map(item => ({\n    title: item.title || item.subject || 'Untitled',\n    url: item.url || item.link || null,\n    summary: item.summary || item.description || '',\n    published_at: item.published_at || item.date || new Date().toISOString()\n  }))\n  .filter(item => {\n    try {\n      const published = new Date(item.published_at);\n      return !isNaN(published) && published >= threshold;\n    } catch (e) {\n      return true;\n    }\n  })\n  .slice(0, maxItems);\n\nreturn [{\n  json: {\n    items: normalized,\n    generated_at: new Date().toISOString(),\n    lookback_days: lookbackDays\n  }\n}];"
      },
      "name": "2. Normalize Feed",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-2512, -112],
      "id": "6d82606e-c199-47ec-8f43-945881b21bb1"
    },
    {
      "parameters": {
        "conditions": {
          "combinator": "and",
          "conditions": [
            {
              "leftValue": "={{ Array.isArray($json.items) ? $json.items.length : 0 }}",
              "operator": {
                "type": "number",
                "operation": "larger"
              },
              "rightValue": 0
            }
          ]
        },
        "options": {}
      },
      "name": "3. Has Content?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-2272, -112],
      "id": "1ea26766-cdf3-4a79-a55c-3998035eaa00"
    },
    {
      "parameters": {
        "fields": {
          "values": [{}, {}]
        },
        "options": {}
      },
      "name": "3a. Outcome: No Content",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [-2080, -320],
      "id": "32b9df0a-0dc4-4b9e-8f15-34b8913ae292"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH ready AS (\n  SELECT COUNT(*) AS cnt\n  FROM newsletter_subscribers ns\n  WHERE ns.status = 'subscribed'\n    AND ns.unsubscribed_at IS NULL\n    AND ns.confirmed_at IS NOT NULL\n    AND (ns.last_sent_at IS NULL OR ns.last_sent_at <= NOW() - INTERVAL '5 days')\n)\nSELECT COALESCE((SELECT cnt FROM ready), 0)::int AS ready_count;",
        "options": {}
      },
      "name": "4. Count Recipients",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-2080, 16],
      "id": "3aca3bdf-9606-4d9b-bdc6-b662213d6389",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "combinator": "and",
          "conditions": [
            {
              "leftValue": "={{ $json.ready_count }}",
              "operator": {
                "type": "number",
                "operation": "larger"
              },
              "rightValue": 0
            }
          ]
        },
        "options": {}
      },
      "name": "5. Has Recipients?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-1840, 16],
      "id": "1bcb20e4-0b11-4966-8353-8e15b21238c2"
    },
    {
      "parameters": {
        "fields": {
          "values": [{}, {}]
        },
        "options": {}
      },
      "name": "5a. Outcome: No Recipients",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [-1632, -240],
      "id": "b17c858a-26ff-44a2-be1e-9ee8867cea2e"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  ns.id AS subscriber_id,\n  ns.contact_id,\n  ns.unsubscribe_token,\n  ns.last_sent_at,\n  ns.confirmed_at,\n  c.email,\n  c.full_name,\n  COALESCE(NULLIF(c.preferred_lang, ''), 'ru') AS preferred_lang\nFROM newsletter_subscribers ns\nJOIN contacts c ON c.id = ns.contact_id\nWHERE ns.status = 'subscribed'\n  AND ns.unsubscribed_at IS NULL\n  AND ns.confirmed_at IS NOT NULL\n  AND (ns.last_sent_at IS NULL OR ns.last_sent_at <= NOW() - INTERVAL '5 days');",
        "options": {}
      },
      "name": "6. Load Subscribers",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-1600, 144],
      "id": "647233ae-555f-4346-8e4b-e774fd31b82c",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "name": "7. Split Subscribers",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [-1328, 144],
      "id": "6e0ec332-c81e-43c9-a803-1c1fdd22af16"
    },
    {
      "parameters": {
        "functionCode": "const subscriber = $('7. Split Subscribers').item.json;\n    const feed = $('2. Normalize Feed').item.json || {};\n    const template = $('8a. Load Digest Template').item.json || {};\n\n    const items = Array.isArray(feed.items) ? feed.items : [];\n    const lang = subscriber.preferred_lang || 'ru';\n    const unsubscribeBase = $env.NEWSLETTER_UNSUB_BASE_URL || 'https://example.com/newsletter/unsubscribe';\n    const unsubscribeUrl = `${unsubscribeBase}?token=${encodeURIComponent(subscriber.unsubscribe_token)}&action=unsubscribe`;\n\n    const fullName = subscriber.full_name ? String(subscriber.full_name).trim() : '';\n    const fullNameSuffix = fullName ? `, ${fullName}` : '';\n\n    const greetings = {\n      ru: 'Свежие материалы за последние дни',\n      en: 'Fresh updates for you',\n      pl: 'Najnowsze materiały dla Ciebie'\n    };\n\n    const greetingLine = `${greetings[lang] || greetings.en}${fullNameSuffix}:`;\n\n    const bulletList = items.map((item, idx) => {\n      const index = idx + 1;\n      const title = item.title || `Материал ${index}`;\n      return item.url ? `${index}. ${title} — ${item.url}` : `${index}. ${title}`;\n    }).join('\n');\n\n    function applyTemplate(input, variables) {\n      if (typeof input !== 'string') return '';\n      return Object.entries(variables).reduce((acc, [key, value]) => {\n        const safeValue = value == null ? '' : String(value);\n        const pattern = new RegExp(`{{\\s*${key}\\s*}}`, 'g');\n        return acc.replace(pattern, safeValue);\n      }, input);\n    }\n\n    const subjectTemplate = template.subject_template || '';\n    const bodyTemplate = template.body_template || '';\n    if (!subjectTemplate || !bodyTemplate) {\n      throw new Error('Digest template is missing subject or body content.');\n    }\n\n    const generatedAt = (feed.generated_at || new Date().toISOString()).slice(0, 10);\n\n    const subject = applyTemplate(subjectTemplate, {\n      generated_date: generatedAt,\n      full_name: fullName,\n      full_name_suffix: fullNameSuffix,\n      items_count: items.length\n    });\n\n    const bodyText = applyTemplate(bodyTemplate, {\n      greeting_line: greetingLine,\n      items_block: bulletList,\n      unsubscribe_url: unsubscribeUrl,\n      full_name: fullName,\n      full_name_suffix: fullNameSuffix,\n      items_count: items.length\n    });\n\n    const bodyHtml = bodyText.replace(/\n/g, '<br />');\n\n    return [{\n      json: {\n        email: subscriber.email,\n        full_name: fullName || null,\n        subject,\n        body_text: bodyText,\n        body_html: bodyHtml,\n        unsubscribe_url: unsubscribeUrl,\n        subscriber_id: subscriber.subscriber_id,\n        items_sent: items.length\n      }\n    }];"
      },
      "name": "8b. Compose Digest Email",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-1088, 144],
      "id": "e7b82993-32cc-4a16-85b2-90efc59536ea"
    },
    {
      "parameters": {
        "sendTo": "={{ $json.email }}",
        "subject": "={{ $json.subject }}",
        "message": "={{ $json.body_text }}",
        "options": {
          "appendAttribution": false
        }
      },
      "name": "9. Send Digest Email",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [-848, 144],
      "id": "1da333e1-9cf9-42bc-bffe-63821eb1e860",
      "webhookId": "f59257dd-3799-4a14-a750-d897f15eccda",
      "credentials": {
        "gmailOAuth2": {
          "id": "dRP6U59xFUhSEpp0",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO messages (conversation_id, direction, medium, sender_contact_id, body, body_html, message_ts, meta)\nVALUES (NULL, 'outbound', 'email', NULL, $1, $2, NOW(), jsonb_build_object('kind', 'newsletter_digest', 'subscriber_id', $3::uuid, 'email', $4, 'subject', $5))\nRETURNING id;",
        "options": {
          "queryReplacement": "={{ [ $('8b. Compose Digest Email').item.json.body_text, $('8b. Compose Digest Email').item.json.body_html, $('8b. Compose Digest Email').item.json.subscriber_id, $('8b. Compose Digest Email').item.json.email, $('8b. Compose Digest Email').item.json.subject ] }}"
        }
      },
      "name": "10. Log Digest Message",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-608, 144],
      "id": "60c5bf9d-34af-4c3a-9b2e-b1138769c1fb",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE newsletter_subscribers\nSET last_sent_at = NOW(), updated_at = NOW()\nWHERE id = $1::uuid\nRETURNING id;",
        "options": {
          "queryReplacement": "={{ [ $('8b. Compose Digest Email').item.json.subscriber_id ] }}"
        }
      },
      "name": "11. Update Last Sent",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-368, 144],
      "id": "c8a997e7-e825-4f58-bfa3-c42fe83c8eb5",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('subscriber', $1::uuid, 'newsletter_digest_sent', jsonb_build_object('items', $2::int, 'subject', $3, 'sent_at', NOW()))\nRETURNING id;",
        "options": {
          "queryReplacement": "={{ [ $('8b. Compose Digest Email').item.json.subscriber_id, $('8b. Compose Digest Email').item.json.items_sent, $('8b. Compose Digest Email').item.json.subject ] }}"
        }
      },
      "name": "12. Log Digest Event",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-128, 144],
      "id": "56dc736c-08e9-4b5f-8984-a4df7d8e0b2d",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "amount": 3,
        "unit": "seconds"
      },
      "name": "13. Rate Limit Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [112, 144],
      "id": "f134c99f-ed68-4971-9163-61016453fb84",
      "webhookId": "195ccbcd-9e8b-440b-8cb3-2bb33da76c05"
    },
    {
      "parameters": {
        "functionCode": "const feed = $('2. Normalize Feed').item.json;\nconst countRow = $('4. Count Recipients').item.json;\nreturn [{\n  json: {\n    status: 'sent',\n    recipients: countRow.ready_count || 0,\n    items: Array.isArray(feed.items) ? feed.items.length : 0,\n    generated_at: feed.generated_at\n  }\n}];"
      },
      "name": "14. Outcome: Summary",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-976, 384],
      "id": "3b5f2c83-057f-4056-9715-bdfa3c9d6d57"
    },
    {
      "parameters": {
        "functionCode": "return items;"
      },
      "name": "15. Return Digest Result",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-688, 336],
      "id": "3997565f-e2c1-42f0-a5ed-31013aeb2500"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT subject_template, body_template FROM templates WHERE name = $1;",
        "options": {
          "queryReplacement": "={{ [ 'newsletter.digest.' + ( $('7. Split Subscribers').item.json.preferred_lang || 'ru' ) ] }}"
        }
      },
      "name": "8a. Load Digest Template",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-1088, -32],
      "id": "2e321ed2-4b81-4c1f-835f-520d9aa9c565",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    }
  ],
  "connections": {
    "[START] Weekly Digest": {
      "main": [
        [
          {
            "node": "1. Fetch Digest Feed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1. Fetch Digest Feed": {
      "main": [
        [
          {
            "node": "2. Normalize Feed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. Normalize Feed": {
      "main": [
        [
          {
            "node": "3. Has Content?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3. Has Content?": {
      "main": [
        [
          {
            "node": "4. Count Recipients",
            "type": "main",
            "index": 0
          },
          {
            "node": "3a. Outcome: No Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3a. Outcome: No Content": {
      "main": [
        [
          {
            "node": "15. Return Digest Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4. Count Recipients": {
      "main": [
        [
          {
            "node": "5. Has Recipients?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5. Has Recipients?": {
      "main": [
        [
          {
            "node": "6. Load Subscribers",
            "type": "main",
            "index": 0
          },
          {
            "node": "5a. Outcome: No Recipients",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5a. Outcome: No Recipients": {
      "main": [
        [
          {
            "node": "15. Return Digest Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6. Load Subscribers": {
      "main": [
        [
          {
            "node": "7. Split Subscribers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "7. Split Subscribers": {
      "main": [
        [
          {
            "node": "8a. Load Digest Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "8b. Compose Digest Email": {
      "main": [
        [
          {
            "node": "9. Send Digest Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "9. Send Digest Email": {
      "main": [
        [
          {
            "node": "10. Log Digest Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "10. Log Digest Message": {
      "main": [
        [
          {
            "node": "11. Update Last Sent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "11. Update Last Sent": {
      "main": [
        [
          {
            "node": "12. Log Digest Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "12. Log Digest Event": {
      "main": [
        [
          {
            "node": "13. Rate Limit Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "13. Rate Limit Wait": {
      "main": [
        [
          {
            "node": "7. Split Subscribers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "14. Outcome: Summary": {
      "main": [
        [
          {
            "node": "15. Return Digest Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "8a. Load Digest Template": {
      "main": [
        [
          {
            "node": "8b. Compose Digest Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "69871f35b6454f2fa99c2f68403092fbaef8d3b776d3b26f1ec8ca290a75b807"
  }
}
