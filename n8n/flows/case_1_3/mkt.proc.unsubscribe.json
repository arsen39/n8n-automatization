{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "={{ $env.NEWSLETTER_UNSUB_METHOD || 'GET' }}",
        "path": "newsletter/manage",
        "responseMode": "responseNode",
        "options": {
          "rawBody": false
        }
      },
      "name": "[START] Newsletter Manage",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [-2896, -224],
      "id": "f0a163e3-7ef3-4b56-8116-6ccb8c7006c1",
      "webhookId": "d61f3e86-c877-4df6-a70f-7f29af1fa67b"
    },
    {
      "parameters": {
        "functionCode": "const request = items[0]?.json ?? {};\nconst query = request.query || {};\nconst body = request.body || {};\nconst params = request.params || {};\n\nconst token = String(query.token || body.token || params.token || '').trim();\nconst actionRaw = String(query.action || body.action || params.action || 'unsubscribe').trim().toLowerCase();\nconst action = ['confirm', 'unsubscribe'].includes(actionRaw) ? actionRaw : 'unsubscribe';\n\nreturn [{\n  json: {\n    token,\n    action,\n    request\n  }\n}];"
      },
      "name": "1. Extract Token",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-2608, -224],
      "id": "d2a70c20-b58b-4a05-aa55-270bfa226e95"
    },
    {
      "parameters": {
        "conditions": {
          "combinator": "and",
          "conditions": [
            {
              "leftValue": "={{ $json.token }}",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            }
          ]
        },
        "options": {}
      },
      "name": "1a. Token Provided?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-2400, -224],
      "id": "3f1fcd51-9815-43a8-b473-d36f54771267"
    },
    {
      "parameters": {
        "fields": {
          "values": [{}, {}]
        },
        "options": {}
      },
      "name": "1b. Outcome: Missing Token",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [-2192, -384],
      "id": "f08d0c03-5d00-4d1f-9386-e2b8c0a075d5"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH subscriber AS (\n  SELECT\n    ns.id AS subscriber_id,\n    ns.contact_id,\n    ns.status,\n    ns.double_opt_in_required,\n    ns.confirmed_at,\n    ns.unsubscribed_at,\n    ns.unsubscribe_token,\n    c.email,\n    c.full_name,\n    COALESCE(NULLIF(c.preferred_lang, ''), 'ru') AS preferred_lang\n  FROM newsletter_subscribers ns\n  JOIN contacts c ON c.id = ns.contact_id\n  WHERE ns.unsubscribe_token = $1\n  LIMIT 1\n),\nfallback AS (\n  SELECT\n    NULL::uuid AS subscriber_id,\n    NULL::uuid AS contact_id,\n    NULL::subscriber_status AS status,\n    FALSE AS double_opt_in_required,\n    NULL::timestamptz AS confirmed_at,\n    NULL::timestamptz AS unsubscribed_at,\n    NULL::text AS unsubscribe_token,\n    NULL::text AS email,\n    NULL::text AS full_name,\n    'ru'::text AS preferred_lang\n  WHERE NOT EXISTS (SELECT 1 FROM subscriber)\n)\nSELECT * FROM subscriber\nUNION ALL\nSELECT * FROM fallback;",
        "options": {
          "queryReplacement": "={{ [ $('1. Extract Token').item.json.token ] }}"
        }
      },
      "name": "2. Lookup Subscriber",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-2192, -64],
      "id": "56223e04-cb2f-4c49-a863-63fba8144334",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const tokenContext = $('1. Extract Token').item.json;\nconst row = $json || {};\nconst found = !!row.subscriber_id;\nreturn [{\n  json: {\n    ...row,\n    token: tokenContext.token,\n    action: tokenContext.action,\n    found\n  }\n}];"
      },
      "name": "3. Evaluate Subscriber",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-1968, -64],
      "id": "61e9dd5e-a5f8-4e28-bbba-ddfdce9bb69f"
    },
    {
      "parameters": {
        "conditions": {
          "combinator": "and",
          "conditions": [
            {
              "leftValue": "={{ $json.found }}",
              "operator": {
                "type": "boolean",
                "operation": "isTrue"
              }
            }
          ]
        },
        "options": {}
      },
      "name": "3a. Subscriber Found?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-1760, -64],
      "id": "e9e48b26-4df2-4165-be9e-c95594f5fe4d"
    },
    {
      "parameters": {
        "fields": {
          "values": [{}, {}]
        },
        "options": {}
      },
      "name": "3b. Outcome: Not Found",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [-1536, -224],
      "id": "50bafbab-305f-4bea-b581-6bed899e520f"
    },
    {
      "parameters": {
        "conditions": {
          "combinator": "and",
          "conditions": [
            {
              "leftValue": "={{ $json.action }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "rightValue": "confirm"
            }
          ]
        },
        "options": {}
      },
      "name": "4. Confirm Action?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-1536, 64],
      "id": "7724f15f-d236-4572-87f8-55bc33466c93"
    },
    {
      "parameters": {
        "conditions": {
          "combinator": "and",
          "conditions": [
            {
              "leftValue": "={{ $json.status }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "rightValue": "pending_opt_in"
            }
          ]
        },
        "options": {}
      },
      "name": "4a. Pending Opt-In?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-1312, 160],
      "id": "3d7f2932-54eb-4aea-871a-767a3910b941"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE newsletter_subscribers\nSET status = 'subscribed', confirmed_at = NOW(), unsubscribed_at = NULL, updated_at = NOW()\nWHERE id = $1::uuid\nRETURNING id, contact_id;",
        "options": {
          "queryReplacement": "={{ [ $json.subscriber_id ] }}"
        }
      },
      "name": "5. Confirm Subscriber",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-1072, 256],
      "id": "faf29959-f108-44dc-b6d2-3ca98eaa9d08",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const subscriber = $('3. Evaluate Subscriber').item.json;\n    const template = $('5a. Load Confirm Template').item.json || {};\n    const preferencesUrl = $env.NEWSLETTER_PREFERENCES_URL || 'https://example.com/newsletter/manage';\n    const unsubscribeBase = $env.NEWSLETTER_UNSUB_BASE_URL || 'https://example.com/newsletter/unsubscribe';\n    const unsubscribeUrl = `${unsubscribeBase}?token=${encodeURIComponent(subscriber.token)}&action=unsubscribe`;\n\n    const fullName = subscriber.full_name ? String(subscriber.full_name).trim() : '';\n    const fullNameSuffix = fullName ? `, ${fullName}` : '';\n\n    function applyTemplate(input, variables) {\n      if (typeof input !== 'string') return '';\n      return Object.entries(variables).reduce((acc, [key, value]) => {\n        const safeValue = value == null ? '' : String(value);\n        const pattern = new RegExp(`{{\\s*${key}\\s*}}`, 'g');\n        return acc.replace(pattern, safeValue);\n      }, input);\n    }\n\n    const subjectTemplate = template.subject_template || '';\n    const bodyTemplate = template.body_template || '';\n    if (!subjectTemplate || !bodyTemplate) {\n      throw new Error('Confirmation template is missing subject or body content.');\n    }\n\n    const subject = applyTemplate(subjectTemplate, {\n      preferences_url: preferencesUrl,\n      unsubscribe_url: unsubscribeUrl,\n      full_name: fullName,\n      full_name_suffix: fullNameSuffix,\n    });\n\n    const bodyText = applyTemplate(bodyTemplate, {\n      preferences_url: preferencesUrl,\n      unsubscribe_url: unsubscribeUrl,\n      full_name: fullName,\n      full_name_suffix: fullNameSuffix,\n    });\n\n    const bodyHtml = bodyText.replace(/\n/g, '<br />');\n\n    return [{\n      json: {\n        email: subscriber.email,\n        subject,\n        body_text: bodyText,\n        body_html: bodyHtml,\n        unsubscribe_url: unsubscribeUrl,\n        preferences_url: preferencesUrl,\n        subscriber_id: subscriber.subscriber_id\n      }\n    }];"
      },
      "name": "5b. Compose Confirm Email",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-832, 256],
      "id": "01a76057-2e4d-44e6-8c6f-6cdc3df7844b"
    },
    {
      "parameters": {
        "sendTo": "={{ $json.email }}",
        "subject": "={{ $json.subject }}",
        "message": "={{ $json.body_text }}",
        "options": {
          "appendAttribution": false
        }
      },
      "name": "5c. Send Confirm Email",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [-592, 256],
      "id": "0d8f534f-3a23-4139-8654-93ea90d2d3f1",
      "webhookId": "6d9adc1e-7754-4e15-bbbb-62f213c632ba",
      "credentials": {
        "gmailOAuth2": {
          "id": "dRP6U59xFUhSEpp0",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO messages (conversation_id, direction, medium, sender_contact_id, body, body_html, message_ts, meta)\nVALUES (NULL, 'outbound', 'email', NULL, $1, $2, NOW(), jsonb_build_object('kind', 'newsletter_confirmed', 'subscriber_id', $3::uuid, 'email', $4, 'subject', $5))\nRETURNING id;",
        "options": {
          "queryReplacement": "={{ [ $('5b. Compose Confirm Email').item.json.body_text, $('5b. Compose Confirm Email').item.json.body_html, $('3. Evaluate Subscriber').item.json.subscriber_id, $('5b. Compose Confirm Email').item.json.email, $('5b. Compose Confirm Email').item.json.subject ] }}"
        }
      },
      "name": "5d. Log Confirm Message",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-352, 256],
      "id": "9eccc42d-e5f8-49d7-8726-6b33d01a5593",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('subscriber', $1::uuid, 'newsletter_confirmed', jsonb_build_object('email', $2, 'confirmed_at', NOW()))\nRETURNING id;",
        "options": {
          "queryReplacement": "={{ [ $('3. Evaluate Subscriber').item.json.subscriber_id, $('5b. Compose Confirm Email').item.json.email ] }}"
        }
      },
      "name": "5e. Log Confirm Event",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-112, 256],
      "id": "3eddaba0-15d2-4684-bc24-881a32d95dbb",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "fields": {
          "values": [{}]
        },
        "options": {}
      },
      "name": "5f. Outcome: Confirmed",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [128, 256],
      "id": "dfab2179-d4d5-4c7d-9235-c039bc0b1a01"
    },
    {
      "parameters": {
        "fields": {
          "values": [{}]
        },
        "options": {}
      },
      "name": "4b. Outcome: Already Confirmed",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [-1072, 64],
      "id": "2d315a08-6725-4c2b-9c90-6e16a6a9db03"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE newsletter_subscribers\nSET status = 'unsubscribed', unsubscribed_at = NOW(), updated_at = NOW()\nWHERE id = $1::uuid\nRETURNING id;",
        "options": {
          "queryReplacement": "={{ [ $('3. Evaluate Subscriber').item.json.subscriber_id ] }}"
        }
      },
      "name": "6. Mark Unsubscribed",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-1072, -192],
      "id": "eaaac192-643d-4dd1-9284-dbd1d4d23baf",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const subscriber = $('3. Evaluate Subscriber').item.json;\n    const template = $('6a. Load Unsub Template').item.json || {};\n    const resubscribeUrl = $env.NEWSLETTER_RESUBSCRIBE_URL || 'https://example.com/newsletter';\n\n    const fullName = subscriber.full_name ? String(subscriber.full_name).trim() : '';\n    const fullNameSuffix = fullName ? `, ${fullName}` : '';\n\n    function applyTemplate(input, variables) {\n      if (typeof input !== 'string') return '';\n      return Object.entries(variables).reduce((acc, [key, value]) => {\n        const safeValue = value == null ? '' : String(value);\n        const pattern = new RegExp(`{{\\s*${key}\\s*}}`, 'g');\n        return acc.replace(pattern, safeValue);\n      }, input);\n    }\n\n    const subjectTemplate = template.subject_template || '';\n    const bodyTemplate = template.body_template || '';\n    if (!subjectTemplate || !bodyTemplate) {\n      throw new Error('Unsubscribe template is missing subject or body content.');\n    }\n\n    const subject = applyTemplate(subjectTemplate, {\n      resubscribe_url: resubscribeUrl,\n      full_name: fullName,\n      full_name_suffix: fullNameSuffix,\n    });\n\n    const bodyText = applyTemplate(bodyTemplate, {\n      resubscribe_url: resubscribeUrl,\n      full_name: fullName,\n      full_name_suffix: fullNameSuffix,\n    });\n\n    const bodyHtml = bodyText.replace(/\n/g, '<br />');\n\n    return [{\n      json: {\n        email: subscriber.email,\n        subject,\n        body_text: bodyText,\n        body_html: bodyHtml,\n        resubscribe_url: resubscribeUrl,\n        subscriber_id: subscriber.subscriber_id\n      }\n    }];"
      },
      "name": "6b. Compose Unsub Email",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [-832, -192],
      "id": "3402c5cb-6d22-43de-9e23-1da1d29efe52"
    },
    {
      "parameters": {
        "sendTo": "={{ $json.email }}",
        "subject": "={{ $json.subject }}",
        "message": "={{ $json.body_text }}",
        "options": {
          "appendAttribution": false
        }
      },
      "name": "6c. Send Unsub Email",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [-592, -192],
      "id": "6f2878e3-0a8e-45e7-b23a-18afa6108ef7",
      "webhookId": "0fdd5c0c-036a-44e4-a3ad-f6c204399a61",
      "credentials": {
        "gmailOAuth2": {
          "id": "dRP6U59xFUhSEpp0",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO messages (conversation_id, direction, medium, sender_contact_id, body, body_html, message_ts, meta)\nVALUES (NULL, 'outbound', 'email', NULL, $1, $2, NOW(), jsonb_build_object('kind', 'newsletter_unsubscribed', 'subscriber_id', $3::uuid, 'email', $4, 'subject', $5))\nRETURNING id;",
        "options": {
          "queryReplacement": "={{ [ $('6b. Compose Unsub Email').item.json.body_text, $('6b. Compose Unsub Email').item.json.body_html, $('3. Evaluate Subscriber').item.json.subscriber_id, $('6b. Compose Unsub Email').item.json.email, $('6b. Compose Unsub Email').item.json.subject ] }}"
        }
      },
      "name": "6d. Log Unsub Message",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-352, -192],
      "id": "71640827-4aac-4377-806a-9f73d5072d74",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pipeline_events (entity_type, entity_id, event_type, data)\nVALUES ('subscriber', $1::uuid, 'newsletter_unsubscribed', jsonb_build_object('email', $2, 'unsubscribed_at', NOW()))\nRETURNING id;",
        "options": {
          "queryReplacement": "={{ [ $('3. Evaluate Subscriber').item.json.subscriber_id, $('6b. Compose Unsub Email').item.json.email ] }}"
        }
      },
      "name": "6e. Log Unsub Event",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-112, -192],
      "id": "30c54446-cef9-423a-b4e8-1441f216bd4e",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "fields": {
          "values": [{}]
        },
        "options": {}
      },
      "name": "6f. Outcome: Unsubscribed",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [128, -192],
      "id": "b7295313-3f46-416b-b71f-9e83fce45039"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "name": "7. Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [400, 48],
      "id": "4c91166a-9735-4d4f-9374-30e781ecee27"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT subject_template, body_template FROM templates WHERE name = $1;",
        "options": {
          "queryReplacement": "={{ [ 'newsletter.confirmed.' + ( $('3. Evaluate Subscriber').item.json.preferred_lang || 'ru' ) ] }}"
        }
      },
      "name": "5a. Load Confirm Template",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-832, 384],
      "id": "a6742732-513a-4ada-bf08-887f68a3000f",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT subject_template, body_template FROM templates WHERE name = $1;",
        "options": {
          "queryReplacement": "={{ [ 'newsletter.unsubscribed.' + ( $('3. Evaluate Subscriber').item.json.preferred_lang || 'ru' ) ] }}"
        }
      },
      "name": "6a. Load Unsub Template",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [-832, -320],
      "id": "e122f270-0256-4a9c-bbe3-5fc4bc8eae04",
      "credentials": {
        "postgres": {
          "id": "Q6TYPE7PGoXfCRLa",
          "name": "Postgres account"
        }
      }
    }
  ],
  "connections": {
    "[START] Newsletter Manage": {
      "main": [
        [
          {
            "node": "1. Extract Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1. Extract Token": {
      "main": [
        [
          {
            "node": "1a. Token Provided?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1a. Token Provided?": {
      "main": [
        [
          {
            "node": "2. Lookup Subscriber",
            "type": "main",
            "index": 0
          },
          {
            "node": "1b. Outcome: Missing Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1b. Outcome: Missing Token": {
      "main": [
        [
          {
            "node": "7. Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. Lookup Subscriber": {
      "main": [
        [
          {
            "node": "3. Evaluate Subscriber",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3. Evaluate Subscriber": {
      "main": [
        [
          {
            "node": "3a. Subscriber Found?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3a. Subscriber Found?": {
      "main": [
        [
          {
            "node": "4. Confirm Action?",
            "type": "main",
            "index": 0
          },
          {
            "node": "3b. Outcome: Not Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3b. Outcome: Not Found": {
      "main": [
        [
          {
            "node": "7. Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4. Confirm Action?": {
      "main": [
        [
          {
            "node": "6. Mark Unsubscribed",
            "type": "main",
            "index": 0
          },
          {
            "node": "4a. Pending Opt-In?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4a. Pending Opt-In?": {
      "main": [
        [
          {
            "node": "5. Confirm Subscriber",
            "type": "main",
            "index": 0
          },
          {
            "node": "4b. Outcome: Already Confirmed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5. Confirm Subscriber": {
      "main": [
        [
          {
            "node": "5a. Load Confirm Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5b. Compose Confirm Email": {
      "main": [
        [
          {
            "node": "5c. Send Confirm Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5f. Outcome: Confirmed": {
      "main": [
        [
          {
            "node": "7. Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4b. Outcome: Already Confirmed": {
      "main": [
        [
          {
            "node": "7. Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6. Mark Unsubscribed": {
      "main": [
        [
          {
            "node": "6a. Load Unsub Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6b. Compose Unsub Email": {
      "main": [
        [
          {
            "node": "6c. Send Unsub Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6f. Outcome: Unsubscribed": {
      "main": [
        [
          {
            "node": "7. Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5a. Load Confirm Template": {
      "main": [
        [
          {
            "node": "5b. Compose Confirm Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6a. Load Unsub Template": {
      "main": [
        [
          {
            "node": "6b. Compose Unsub Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "69871f35b6454f2fa99c2f68403092fbaef8d3b776d3b26f1ec8ca290a75b807"
  }
}
